+p_xml: 'version="1.0" encoding="UTF-8" standalone="yes" '
+directive: DOCTYPE bugzilla SYSTEM "http://bugzilla.fieldtriptoolbox.org/page.cgi?id=bugzilla.dtd"
bugzilla:
  +@version: 4.4.1
  +@urlbase: http://bugzilla.fieldtriptoolbox.org/
  +@maintainer: r.oostenveld@donders.ru.nl
  bug:
    bug_id: "1318"
    creation_ts: 2012-02-08 13:25:00 +0100
    short_desc: improve the filter padding options for the ft_preproc filter functions
    delta_ts: 2014-03-12 12:21:41 +0100
    reporter_accessible: "1"
    cclist_accessible: "1"
    classification_id: "1"
    classification: Unclassified
    product: FieldTrip
    component: preproc
    version: unspecified
    rep_platform: PC
    op_sys: Mac OS
    bug_status: CLOSED
    resolution: FIXED
    see_also: http://bugzilla.fcdonders.nl/show_bug.cgi?id=1561
    bug_file_loc:
    status_whiteboard:
    keywords:
    priority: P3
    bug_severity: normal
    target_milestone: '---'
    dependson: "1730"
    everconfirmed: "1"
    reporter:
      +content: r.oostenveld
      +@name: Robert Oostenveld
    assigned_to:
      +content: jorn
      +@name: Jörn M. Horschig
    cc:
      - jorn
      - litvak.vladimir
      - roemer.van.der.meij
    comment_sort_order: oldest_to_newest
    long_desc:
      - +@isprivate: "0"
        commentid: "5209"
        comment_count: "0"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-02-08 13:25:12 +0100
        thetext: "Vladimir mentioned to me that it is desired for ft_specest_hilbert to have better filter padding. Since the filtering is done with ft_preproc functions, the improvement has to be implemented there.\n\nThe idea is that mirroring the data at the edges might help.\n\nTODO \n- create a test case (named test_bugXXX.m with XXX the right number) that demonstrates a case with hand-crafted \"random\" data which would benefit from improved edge padding."
      - +@isprivate: "0"
        commentid: "6581"
        comment_count: "1"
        who:
          +content: jorn
          +@name: Jörn M. Horschig
        bug_when: 2012-06-27 16:24:06 +0200
        thetext: |-
          Hey Vladimir,

          do you mind if I take this one up? It would be in line with bug 1561 on which Robert and we just worked a few minutes ago, so this one would be a quick fix now that I just started digging into the filtering stuff ;)

          Best,
          Jörn
      - +@isprivate: "0"
        commentid: "6582"
        comment_count: "2"
        who:
          +content: litvak.vladimir
          +@name: Vladimir Litvak
        bug_when: 2012-06-27 16:29:39 +0200
        thetext: |-
          Hi Jorn,

          I would be very happy if you take this. Actually I haven't realized till now that I was supposed to work on this at all.

          Good luck,

          Vladimir
      - +@isprivate: "0"
        commentid: "6584"
        comment_count: "3"
        who:
          +content: jorn
          +@name: Jörn M. Horschig
        bug_when: 2012-06-27 16:54:53 +0200
        thetext: thanks ;)
      - +@isprivate: "0"
        commentid: "7044"
        comment_count: "4"
        who:
          +content: jorn
          +@name: Jörn M. Horschig
        bug_when: 2012-08-21 14:49:01 +0200
        thetext: |-
          hm, two possibilities: either the high-level function (ft_preprocessing) will pad the mirrored data and remove it (my favourite) or the low-level function will do that (not sure how, some filthy trick like negative cfg.padding, or new option like cfg.mirrorpad).

          since I prefer the first solution, I thought about it such that mirror padding can only be done for in-memory data and will automatically be done if cfg.padding is used for in-memory data. anyone who wants to do mirror padding without going through the high-level function has to do that manually. any thoughts on this?
      - +@isprivate: "0"
        commentid: "7045"
        comment_count: "5"
        who:
          +content: jorn
          +@name: Jörn M. Horschig
        bug_when: 2012-08-21 14:50:42 +0200
        thetext: uh, just saw that the unpadding is already done by the low-level function - so only the question whether the high- or low-level function should do the padding remains
      - +@isprivate: "0"
        commentid: "7072"
        comment_count: "6"
        who:
          +content: jorn
          +@name: Jörn M. Horschig
        bug_when: 2012-08-22 14:25:30 +0200
        thetext: "agreed upon in Ft meeting. \n\nVladimir, is it okay for you if the padding is done in ft_preprocessing and not in the low-level functions?\nI just had a quick look at specest_hilbert and saw that the function is actually doing some cranky stuff which has absolutely nothing to do ft_preprocessing, so this solution does not help you. Is mirrorpadding always more favourable than zeropadding for specest_hilbert? I could then replace the zeropadding there"
      - +@isprivate: "0"
        commentid: "7073"
        comment_count: "7"
        who:
          +content: litvak.vladimir
          +@name: Vladimir Litvak
        bug_when: 2012-08-22 14:32:35 +0200
        thetext: |-
          Hi Jorn,

          ft_preprocessing is not good as we don't use it. If it's in ft_preproc_... functions then it's OK.

          I took the mirror padding idea from the Cardiff group who actually use Hilbert for spectral estimation. I don't have much experience with it myself but my feeling is it's quite a good idea also for filtering in general.

          Vladimir
      - +@isprivate: "0"
        commentid: "7079"
        comment_count: "8"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-08-22 15:59:28 +0200
        thetext: "in the FT meeting one hour ago we discussed it, but there it was not clear that it was motivated by ft_spectest_hilbert. This changes the situation and necessitates that it is in either ft_preproc_bandpassfilter or in ft_spectest_hilbert itself.\n\nI suggest to change it like\n\nfunction [filt] = ft_preproc_bandpassfilter(dat, Fs, Fbp, N, type, dir)\nfunction [filt] = ft_preproc_bandpassfilter(dat, Fs, Fbp, N, type, dir, pad)\n\nwhere pad is a string, which can be zero, mirror, edge. The default (current) implementation is zero.\n\nmirror would be \ntmpdat = [fliplr(dat) dat dat];\nand edge\ntmpdat = [repmat(dat(:,1),1,n) dat repmat(dat(:,end),1,n)];\n\nI would keep the mean subtraction as it is, that will always be beneficial (or neutral).\n\nThe same can be implemented in low/high and bandstop. The option should be passed somehow to the user in a cfg as cfg.bandpassfiltpad and to ft_specest_hilbert as filtpad (because that one only has one type of filter, whereas ft_preprocessing has multiple)."
      - +@isprivate: "0"
        commentid: "7085"
        comment_count: "9"
        who:
          +content: roemer.van.der.meij
          +@name: Roemer van der Meij
        bug_when: 2012-08-22 16:29:27 +0200
        thetext: "(In reply to comment #8)\nI that case we would also need two padding parameters I think, i.e. padtype and padlength: \npadtype   = 'zero', 'edge', 'mirror'\npadlength = number, samples needed to be padded out to\n\n\nTo keep things consistent, it might better to create a small function like:\nft_preproc_padding(dat, padtype, padlength, mode)\n(mode being 'add', or 'remove')\n\nThis can then be called from all filter functions, with the default being padtype = [];\n\n\n\nTrivial, but for mirroring it should be:\ntmpdat = [fliplr(dat) dat fliplr(dat)];\nOr, for longer sizes ;),\ntmpdat = [fliplr(dat) dat fliplr(dat) dat fliplr(dat) dat fliplr(dat)];"
      - +@isprivate: "0"
        commentid: "7984"
        comment_count: "10"
        who:
          +content: jorn
          +@name: Jörn M. Horschig
        bug_when: 2012-10-24 16:45:49 +0200
        thetext: "function [dat] = ft_preproc_padding(dat, padtype, padlength)\n% FT_PREPROC_PADDING performs padding on the data, i.e. adds or removes \n% samples to/from the data matrix.\n%\n% Use as\n%   [dat] = ft_preproc_padding(dat, padtype, padlength)\n% where\n%   dat         data matrix (Nchan1 X Ntime)\n%   padtype     'zero', 'edge', 'mirror' or 'remove'\n%   padlength   scalar, number of samples that will be padded \n\n\n513 $ svn add ft_preproc_padding.m\nA         ft_preproc_padding.m\njorhor@mentat284:~/FieldTrip/trunk/preproc\n514 $ svn ci ft_preproc_padding.m -m \"enhancement-#1318- added new preproc_padding function that should (later) take over all padding apart from datapadding\"\nAdding         ft_preproc_padding.m\nTransmitting file data .\nCommitted revision 6786.\n\n\nNeither did I test the function nor did is it used anywhere, yet. \nThe mirror padding, however, turned out to be more complex if done properly:\n1) also with mirror padding, only a certain number of samples to be padded is desired (imagine a 5minute piece of data would be mirrored... hello mr. memory problem!)\n2) as Roemer pointed out, if the to-be-padded data is more than the # samples available, padding has to be reversed\n3) we do not want the first (and last) sample each to be duplicated (i.e. we do not want [1 2 3 3 2 1] but rather [1 2 3 2 1])\n\nGonna replace all padding procedures by calls to this function next week. In the meanwhile, Vladimir, is is alright for you to have it this way?"
      - +@isprivate: "0"
        commentid: "7985"
        comment_count: "11"
        who:
          +content: jorn
          +@name: Jörn M. Horschig
        bug_when: 2012-10-24 16:51:00 +0200
        thetext: add mean-padding in line with ft_preproc_smooth
      - +@isprivate: "0"
        commentid: "8310"
        comment_count: "12"
        who:
          +content: jorn
          +@name: Jörn M. Horschig
        bug_when: 2012-11-16 14:31:21 +0100
        thetext: |-
          Vladimir, ft_specest_hilbert could get new key-value pairs 'padtype' and 'padlength' and then call ft_preproc_padding. Default would be no padding - agree? The type of filtering can be set manual, different methods are implemented.


          On a more general note: the function 'preproc' currently supports different length for padding in the beginning and in the end of a data matrix. Should this be supported by the new function? Currently it's not.
      - +@isprivate: "0"
        commentid: "8311"
        comment_count: "13"
        who:
          +content: jorn
          +@name: Jörn M. Horschig
        bug_when: 2012-11-16 14:31:51 +0100
        thetext: |-
          (In reply to comment #12)
          *the type of padding
          not filtering, of course...
      - +@isprivate: "0"
        commentid: "8312"
        comment_count: "14"
        who:
          +content: jorn
          +@name: Jörn M. Horschig
        bug_when: 2012-11-16 14:34:19 +0100
        thetext: ahjaja, and I see default behaviour is zeropadding, that would be kept as it is of course...
      - +@isprivate: "0"
        commentid: "8385"
        comment_count: "15"
        who:
          +content: jorn
          +@name: Jörn M. Horschig
        bug_when: 2012-11-23 11:11:27 +0100
        thetext: padding is more flexible now. Let me know if anything more should be changed or if an error occurs. See also bug 1730.
