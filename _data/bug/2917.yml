+p_xml: 'version="1.0" encoding="UTF-8" standalone="yes" '
+directive: DOCTYPE bugzilla SYSTEM "http://bugzilla.fieldtriptoolbox.org/page.cgi?id=bugzilla.dtd"
bugzilla:
  +@version: 4.4.1
  +@urlbase: http://bugzilla.fieldtriptoolbox.org/
  +@maintainer: r.oostenveld@donders.ru.nl
  bug:
    bug_id: "2917"
    creation_ts: 2015-06-26 14:33:00 +0200
    short_desc: ft_selectdata sorts cfg.channel, channelconnectivity uses this regardless of actual channel order in data
    delta_ts: 2019-08-10 12:32:40 +0200
    reporter_accessible: "1"
    cclist_accessible: "1"
    classification_id: "1"
    classification: Unclassified
    product: FieldTrip
    component: core
    version: unspecified
    rep_platform: All
    op_sys: All
    bug_status: CLOSED
    resolution: FIXED
    bug_file_loc:
    status_whiteboard:
    keywords:
    priority: P5
    bug_severity: major
    target_milestone: '---'
    everconfirmed: "1"
    reporter:
      +content: knakker.balazs
      +@name: Balázs Knakker
    assigned_to:
      +content: tzvetan.popov
      +@name: Tzvetan Popov
    cc:
      - eelke.spaak
      - j.schoffelen
      - jorn
      - knakker.balazs
      - r.oostenveld
      - tzvetan.popov
    comment_sort_order: oldest_to_newest
    long_desc:
      - +@isprivate: "0"
        commentid: "15823"
        comment_count: "0"
        attachid: "714"
        who:
          +content: knakker.balazs
          +@name: Balázs Knakker
        bug_when: 2015-06-26 14:33:54 +0200
        thetext: "Created attachment 714\nTest script based on an ERF timelockstats tutorial demonstrating how channel ordering affects spatial clustering\n\nIn short, during ft_statistics_montecarlo, accross-channel clustering is not always done according to tha actual channel order in the data. In particular, I looked at ft_timelockanalysis. I copy here the part where data is selected, with some comments. For testing, I used the timelockstats tutorial script and data, where cfg.channel={'MEG'} is used.\n\n[varargin{:}] = ft_selectdata(tmpcfg, varargin{:});\n\n% At this point, varargin{:}.cfg.channel becomes sorted\n% alphabetically, even if varargin{:}.cfg.channel is given explicitly.\n% varargin{:}.trial stays consistent with varargin{:}.label, thus \n% inconsistent with varargin{:}.cfg.channel (and cfg.channel, see below.)\n\n% restore the provenance information\n[cfg, varargin{:}] = rollback_provenance(cfg, varargin{:});\n\n% here, varargin{:}.label stays the same, varargin{:}.trial has the \n% same channel order as it was originally given, consistent with \n% varargin{:}.label.\n% however, cfg.channel is sorted\n% alphabetically! This occurs because ft_selectdata fills\n% varargin.cfg.channel with ABC-sorted list of channels (which becomes \n% inconsistent with data if input labels were non-alphabetic), and\n% rollback_provenance copies it into cfg from varargin, and clears it in\n% varargin.\n\nLater on, in ft_statistics_montecarlo, cfg.connectivity being empty and cfg.channel being populated, channelconnectivity is called with one parameter, which causes it to generate the neighbourhood matrix based on cfg.channel. Thus, the connectivity matrix will be generated assuming alphabetic channel order, regardless of the actual channel ordering in the data.\n\nFor testing this, I used the tutorial data and script from http://www.fieldtriptoolbox.org/tutorial/cluster_permutation_timelock. The test script I attach runs the original analysis from the tutorial (which has the correct output), and then demonstrates that \na) accross-channel clustering fails if labels (and corresponding data) are not in alphabetical order.\nb) cfg.connectivity stays the same, disregarding shuffled channel order in the data ifself and its labels.\n Note that for this dataset, randomly shuffled channel order results in clusters that are spatially isolated, but depending on number of channels (especially if fewer) and actual (less random) channel order, less obviously erroneous results can be obtained.\n\nI tried to be as thorough as possible and ran several test scenarios (see comments in attached script), but it is of course still possible that I spoiled something.\n\nThe workaround I applied for the time being was to insert the following line into ft_timelockanalysis, after the selectdata and rollback_provenance part quoted above:\n\ncfg.channel=varargin{1}.label;\n\nPS: I found several bugs that might be related (2069, 2848, 2639, 1707, 2597), but decided to file this separately anyway."
      - +@isprivate: "0"
        commentid: "15828"
        comment_count: "1"
        who:
          +content: knakker.balazs
          +@name: Balázs Knakker
        bug_when: 2015-06-30 10:45:47 +0200
        thetext: "(The version I used for testing was from GitHub, last commit at 19 Jun 14:52 by Robert Oostendveld. \n75f84b74bbe3dc9fe66a295c4326add7ba5a714a)"
      - +@isprivate: "0"
        commentid: "15829"
        comment_count: "2"
        who:
          +content: tzvetan.popov
          +@name: Tzvetan Popov
        bug_when: 2015-06-30 10:55:13 +0200
        thetext: |-
          (In reply to Balázs Knakker from comment #1)

          Hi Balázs,
          thanks for reporting this. I can reproduce the problem and the "fix" with a current FT version. We'll look into this.
          best
          tzvetan
      - +@isprivate: "0"
        commentid: "15830"
        comment_count: "3"
        who:
          +content: tzvetan.popov
          +@name: Tzvetan Popov
        bug_when: 2015-06-30 12:15:24 +0200
        thetext: "The problem seem to originate from the subfunction getselection_chan within ft_selectdata. There on line 631 the labels are defined taking the output of ft_channelselection into account. At this point labels are then alphabetically ordered and used around line 677: \n\ncfg.channel = label; \n\nSuggested fix:\n\ncfg.channel = varargin{1}.label(indx(:,1));\n\nwhich preserves the channel ordering of the input arguments.\n\n@ Eelke, Jörn and Robert\n\ndo you foresee any problems with this?\n\nbest\ntzvetan"
      - +@isprivate: "0"
        commentid: "15831"
        comment_count: "4"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2015-06-30 17:32:36 +0200
        thetext: "(In reply to Tzvetan Popov from comment #3)\n\nThere is no guarantee of a single unique channel ordering that is consistent with the data. E.g imagine that \n\ndata1.label = {'1', '2', '3'};\ndata1.time = 1:10;\ndata1.avg = randn(3,10);\n\ndata2.label = {'3', '2', '1'};\ndata2.time = 1:10;\ndata2.avg = randn(3,10);\n\n\ncfg = [];\ncfg.channel = {'2', '3'};\n[data1s, data2s] = ft_selectdata(cfg, data1, data2);\n\nthen \n>> data1s.label\nans = \n    '2'\n    '3'\n\n>> data2s.label\nans = \n    '2'\n    '3'\n\nso one is consistent, the other is not. But in general I would favour the order of channels at least for the first input data structure (or \"the\" data structure in case of a single input) to remain consistent.\n\n\nif you now look at line 637, there you see that the output channel order is consistent with the order in \"label\". However, on line 631 the channel order is not maintained consistently, which is obvious with\n\n>> union({'3', '2', '1'}, {'3', '2', '1'})\nans = \n    '1'    '2'    '3'\n>> union({'3', '2', '1'}, {})\nans = \n    '1'    '2'    '3'\n\nI suggest to add the lines\n  [ix, iy] = match_str(varargin{1}.label, label);\n  label = varargin{1}.label(ix)\nafter line 633. This match_str call always returns it in the original order of its first input argument."
      - +@isprivate: "0"
        commentid: "15832"
        comment_count: "5"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2015-06-30 17:33:51 +0200
        thetext: "(In reply to Robert Oostenveld from comment #4)\n\noh, and \n  cfg.channel=label \nafter updating the order."
      - +@isprivate: "0"
        commentid: "15835"
        comment_count: "6"
        who:
          +content: tzvetan.popov
          +@name: Tzvetan Popov
        bug_when: 2015-06-30 18:58:24 +0200
        thetext: |-
          (In reply to Robert Oostenveld from comment #5)
          Ok will do make sense.
      - +@isprivate: "0"
        commentid: "15840"
        comment_count: "7"
        who:
          +content: tzvetan.popov
          +@name: Tzvetan Popov
        bug_when: 2015-07-02 09:04:08 +0200
        thetext: |-
          Sending ft_selectdata
          Transmitting file data.
          Committed revision 10509
      - +@isprivate: "0"
        commentid: "16978"
        comment_count: "8"
        who:
          +content: tzvetan.popov
          +@name: Tzvetan Popov
        bug_when: 2016-02-24 09:22:09 +0100
        thetext: |-
          Sending ft_selectdata
          Transmitting file data.
          Committed revision 10509
      - +@isprivate: "0"
        commentid: "20143"
        comment_count: "9"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2019-08-10 12:32:40 +0200
        thetext: "This closes a whole series of bugs that have been resolved (either FIXED/WONTFIX/INVALID) for quite some time. \n\nIf you disagree, please file a new issue on https://github.com/fieldtrip/fieldtrip/issues."
    attachment:
      +@isobsolete: "0"
      +@ispatch: "0"
      +@isprivate: "0"
      attachid: "714"
      date: 2015-06-26 14:33:00 +0200
      delta_ts: 2015-06-26 14:33:54 +0200
      desc: Test script based on an ERF timelockstats tutorial demonstrating how channel ordering affects spatial clustering
      filename: test_timelockstat_select_cluster_bug.m
      type: text/plain
      size: "5669"
      attacher:
        +content: knakker.balazs
        +@name: Balázs Knakker
      data: REMOVED
