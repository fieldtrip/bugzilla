+p_xml: 'version="1.0" encoding="UTF-8" standalone="yes" '
+directive: DOCTYPE bugzilla SYSTEM "http://bugzilla.fieldtriptoolbox.org/page.cgi?id=bugzilla.dtd"
bugzilla:
  +@version: 4.4.1
  +@urlbase: http://bugzilla.fieldtriptoolbox.org/
  +@maintainer: r.oostenveld@donders.ru.nl
  bug:
    bug_id: "1319"
    creation_ts: 2012-02-08 13:29:00 +0100
    short_desc: implement an engine-based distributed computing toolbox
    delta_ts: 2012-12-31 11:46:24 +0100
    reporter_accessible: "1"
    cclist_accessible: "1"
    classification_id: "1"
    classification: Unclassified
    product: FieldTrip
    component: peer
    version: unspecified
    rep_platform: PC
    op_sys: Mac OS
    bug_status: CLOSED
    resolution: FIXED
    bug_file_loc:
    status_whiteboard:
    keywords:
    priority: P3
    bug_severity: normal
    target_milestone: '---'
    everconfirmed: "1"
    reporter:
      +content: r.oostenveld
      +@name: Robert Oostenveld
    assigned_to:
      +content: r.oostenveld
      +@name: Robert Oostenveld
    cc:
      - eelke.spaak
      - g.flandin
      - jorn
    comment_sort_order: oldest_to_newest
    long_desc:
      - +@isprivate: "0"
        commentid: "5210"
        comment_count: "0"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-02-08 13:29:20 +0100
        thetext: "At the moment the peer implementation has a number of features that are only supported for 90%, i.e. it works more or less, but not perfect. These features have to be either\n- removed from the code\n- improved to make them work 100%\n\nI discussed with Guillaume that peer will be used for within-computer distribution of jobs in SPM12. So better to get it in a shape that all SPM12 users will be happy with it on their quad- and octo-core computers. \n\nIt might also be desirable to change some defaults to make it more secure, e.g. only allow localhost and this user to connect."
      - +@isprivate: "0"
        commentid: "5426"
        comment_count: "1"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-03-02 15:30:41 +0100
        thetext: |-
          after the follow up discussion with Guillaume  the following was concluded:

          Instead of using peer, we will try to implement a local-computer-solution that is robust and easy to use on the base of MATLAB engines. The old beowulf code can be used as starting point. The interface should be similar to qsubfeval and qsubcellfun. E.g.

          engpool open 4
          engcellfun(@pause, {1, 2, 3, 4})
          engpool close
      - +@isprivate: "0"
        commentid: "5446"
        comment_count: "2"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-03-05 10:15:57 +0100
        thetext: "after an initial attempt to use the existing engIEvalString, I decided to switch to a solution with threads to run processes in the background. The threaded solution gives a robust method to check when an engine is busy or free, regardless of whether the engine is local or remote (with ssh on linux).\n\nmanzana> svn commit \nAdding         engine\nAdding         engine/engcellfun.m\nAdding         engine/engexec.m\nAdding         engine/engfeval.m\nAdding         engine/engget.m\nAdding         engine/engpool.m\nAdding         engine/private\nAdding         engine/private/engine.c\nAdding         engine/private/engine.m\nAdding  (bin)  engine/private/engine.mexmaci64\nAdding         engine/private/fexec.m\nAdding         engine/private/ft_getopt.c\nAdding         engine/private/ft_getopt.m\nAdding  (bin)  engine/private/ft_getopt.mexa64\nAdding  (bin)  engine/private/ft_getopt.mexglx\nAdding  (bin)  engine/private/ft_getopt.mexmaci\nAdding  (bin)  engine/private/ft_getopt.mexmaci64\nAdding  (bin)  engine/private/ft_getopt.mexw32\nAdding  (bin)  engine/private/ft_getopt.mexw64\nAdding         engine/private/generatejobid.m\nAdding         engine/private/getcustompath.m\nAdding         engine/private/getcustompwd.m\nAdding         engine/private/getglobal.m\nAdding         engine/private/matlabversion.m\nAdding         engine/private/print_mem.m\nAdding         engine/private/print_tim.m\nSending        src/ft_getopt.c\nTransmitting file data .........\nCommitted revision 5384."
      - +@isprivate: "0"
        commentid: "5447"
        comment_count: "3"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-03-05 10:18:22 +0100
        thetext: "(In reply to comment #2)\n\nsome known issues with the current solution include \n- crash of mex file at exit of matlab\n- cleaning up of busy engines needs to be improved\n- the known exceptions/errors have not yet been tested\n- mex file needs to be compiled and tested on apple32, win32/win64 and linux32/linux64"
      - +@isprivate: "0"
        commentid: "5448"
        comment_count: "4"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-03-05 10:49:11 +0100
        thetext: |-
          there were some private functions missing, I added them from qsub/private


          manzana> svn commit
          Sending        engine/engcellfun.m
          Sending        engine/engget.m
          Adding         engine/private/memprofile.m
          Adding  (bin)  engine/private/memprofile.mexa64
          Adding  (bin)  engine/private/memprofile.mexglx
          Adding  (bin)  engine/private/memprofile.mexmaci
          Adding  (bin)  engine/private/memprofile.mexmaci64
          Adding  (bin)  engine/private/memprofile.mexw32
          Adding  (bin)  engine/private/memprofile.mexw64
          Adding         engine/private/setcustompath.m
          Adding         engine/private/setcustompwd.m
          Adding         engine/private/setglobal.m
          Adding         engine/private/tokenize.m
          Transmitting file data ..
          Committed revision 5385.
      - +@isprivate: "0"
        commentid: "5449"
        comment_count: "5"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-03-05 12:57:27 +0100
        thetext: |-
          I made some general cleanups to the code, removed the FIXME sections, increased the speed of submission and collection, added missing private/istrue function


          manzana> svn commit
          Sending        engine/engcellfun.m
          Sending        engine/engpool.m
          Adding         engine/private/istrue.m
          Transmitting file data ..
          Committed revision 5387.
      - +@isprivate: "0"
        commentid: "8032"
        comment_count: "6"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-10-29 14:22:51 +0100
        thetext: |-
          (In reply to comment #3)

          The crash of MATLAB at the end persists. I have done
          enginepool open 2
          done some computations
          enginepool close
          and then did some unrelated stuff for 30 minutes or so. When doing
          clear all
          the following happened.

          ---------

          This error was detected while a MEX-file was running. If the MEX-file
          is not an official MathWorks function, please examine its source code
          for errors. Please consult the External Interfaces Guide for information
          on debugging MEX-files.

          If this problem is reproducible, please submit a Service Request via:
              http://www.mathworks.com/support/contact_us/

          A technical support engineer might contact you with further information.

          Thank you for your help. MATLAB may attempt to recover, but even if recovery appears successful,
          we recommend that you save your workspace and restart MATLAB as soon as possible.

          Warning: An error occurred while running the atExit function for the MEX-file
          /Volumes/Data/roboos/matlab/fieldtrip/engine/private/engine.mexmaci64.
          However, the MEX-file was cleared from memory.
      - +@isprivate: "0"
        commentid: "8067"
        comment_count: "7"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-10-31 09:24:24 +0100
        thetext: |-
          Since I won't be able to develop and test on all platforms, I have deleted the 32 bit mex files for now.

          mac001> svn commit
          Deleting       private/engine.mexglx
          Deleting       private/engine.mexmaci
          Deleting       private/ft_getopt.mexglx
          Deleting       private/ft_getopt.mexmaci
          Deleting       private/ft_getopt.mexw32
          Deleting       private/memprofile.mexglx
          Deleting       private/memprofile.mexmaci
          Deleting       private/memprofile.mexw32

          Committed revision 6838.
      - +@isprivate: "0"
        commentid: "8127"
        comment_count: "8"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-11-04 21:48:01 +0100
        thetext: "(In reply to comment #6)\n\nThe problem with the crash upon cleanup was due to an indexing error (num-1 versus num). Fixed the problem. Re-enabled some code that was commented out due to previous debugging attempts. Recompiled on maci64. \n\nmbp> svn commit \nSending        private/engine.c\nSending        private/engine.mexmaci64\nTransmitting file data ..\nCommitted revision 6872."
      - +@isprivate: "0"
        commentid: "8128"
        comment_count: "9"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-11-04 21:59:45 +0100
        thetext: "(In reply to comment #8)\n\nAlso recompiled on linux64, it seems to work fine in a simple test. \nSee revision 6873."
      - +@isprivate: "0"
        commentid: "8237"
        comment_count: "10"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-11-10 08:49:40 +0100
        thetext: "mac001> svn commit\nSending        engine/enginepool.m\nSending        engine/private/compile.m\nAdding         engine/private/compiler.h\nSending        engine/private/engine.c\nSending        engine/private/engine.mexmaci64\nSending        engine/private/ft_getopt.c\nSending        engine/private/ft_getopt.mexmaci64\nTransmitting file data ......\nCommitted revision 6904.\n\nr6904 | roboos | 2012-11-10 08:47:27 +0100 (Sat, 10 Nov 2012) | 2 lines\n\nenhancement - implemented the suggestions from Guillaume, keep the \nmex file locked if engines are running, reuse the same code to close\nengines, removed matrix.h from includes, updatec compile script,\nfixed some function pointer problems, do not use getpref but rather\nconstruct it from within matlab, some improvements to starting upo\nthe engines on windows. Tested and recompiled on osx."
      - +@isprivate: "0"
        commentid: "8321"
        comment_count: "11"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-11-19 22:29:25 +0100
        thetext: "enhancement - various small changes and extensive testing on OSX, \nthe alternative implementation works reasonably well, but is not\nbug-free. Include the alternative as mex file.\n\n\nmbp> svn commit\nSending        engine/enginefeval.m\nSending        engine/private/alternative.c\nSending        engine/private/compile.m\nSending        engine/private/engine.m\nSending        engine/private/engine.mexmaci64\nTransmitting file data .....\nCommitted revision 6957."
      - +@isprivate: "0"
        commentid: "8399"
        comment_count: "12"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-11-26 10:39:01 +0100
        thetext: "I believe that I figured out why the thread synching failed. Rather than synching separately at the start and end, it should be done like this\n\n\n        MUTEX_LOCK(&mutex_finish[engine]);\n        if (status[engine]!=ENGINE_IDLE) {\n            MUTEX_UNLOCK(&mutex_finish[engine]);\n            mexErrMsgTxt(\"The specified engine is not available\");\n        }\n\n        HERE THE RELEVANT PREPARATION HAPPENS\n   \n        COND_SIGNAL(&cond_start[engine]);\n        COND_WAIT(&cond_finish[engine], &mutex_finish[engine]);\n        DEBUG_PRINT(\"The engine thread finished\\n\");\n        MUTEX_UNLOCK(&mutex_finish[engine]);\n\nThe relevant part is that between the COND_SIGNAL and the COND_WAIT there should not be anything. It starts the thread and then waits until it finishes."
      - +@isprivate: "0"
        commentid: "8400"
        comment_count: "13"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-11-26 10:40:01 +0100
        thetext: |-
          (In reply to comment #12)

          dhcp-97-167> svn commit
          Sending        private/alternative.c
          Sending        private/engine.mexmaci64
          Transmitting file data ..
          Committed revision 6984.

          I will now try on windows...
      - +@isprivate: "0"
        commentid: "8508"
        comment_count: "14"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-11-29 23:19:05 +0100
        thetext: "Ok, so it still did not work.\n\nI found this http://www.multicoreinfo.com/research/misc/Pthread-Tutorial-Peter.pdf which on page 11 and esp. page 12 describe the following \n\nThere is a further subtlety regarding the use of condition variables. Under certain conditions the wait function might return even though the condition variable has not actually been signaled. For example, if the Unix process in general receives a signal, the thread blocked in pthread cond wait() might be elected to process the signal handling function. If system calls are not restarting (the default in many cases) the pthread cond wait() call might return with an interrupted system call error code1. This has nothing to do with the state of the condition so proceeding as if the condition is true would be inappropriate.\n\nI was just doing pthread_cond_wait without checking for a conditional. I now changed it. \n\nAfter that I did not get any deadlocks. However, there still was the occasional \"thread busy\" at unexpected times, which was due to the thread taking a bit longer to return to IDLE than the mex main loop. For that I built in a pause of one second (only triggered if the IDLE condition problem is detected). \n\nI have been able to run a bunch of tests on linux without further problems.\n\nroboos@mentat001> svn commit\nSending        engine/private/alternative.c\nSending        engine/private/engine.c\nSending        engine/private/engine.mexa64\nSending        engine/private/ft_getopt.mexa64\nDeleting       engine/private/pthreadVC2.dll\nTransmitting file data ....\nCommitted revision 7058."
      - +@isprivate: "0"
        commentid: "8509"
        comment_count: "15"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-11-29 23:28:27 +0100
        thetext: "(In reply to comment #14)\n\nNote that the spurious wakeups are also described in the answers here\nhttp://stackoverflow.com/questions/1136371/pthread-and-wait-conditions \n\nFurthermore note that I still suspect some memory to leak in the mex file.\n\nThe \"enginepool open N\" command has to be changed a bit. Right now it immediately returns, which is a bit unexpected. Better would be to wait until all engines run.\n\n----\n\nI have now also tested it on maci64, it also seems to work fine there.\n\nmbp> svn commit\nSending        engine/private/engine.mexmaci64\nTransmitting file data .\nCommitted revision 7060.\n\nThe big question is now whether it works on windows... that is something for tomorrow."
      - +@isprivate: "0"
        commentid: "8511"
        comment_count: "16"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-11-30 10:39:11 +0100
        thetext: |-
          roboos@mentat001> svn commit
          Sending        engine/private/alternative.c
          Sending        engine/private/engine.mexa64
          Sending        engine/private/engine.mexmaci64
          Sending        engine/private/engine.mexw64
          Sending        engine/private/ft_getopt.mexw64
          Transmitting file data .....
          Committed revision 7062.

          It works!

          @Guillaume: please test it. If there are specific issues, report them as separate (new) bugs rather than continuing along this thread.
      - +@isprivate: "0"
        commentid: "8842"
        comment_count: "17"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-12-31 11:46:24 +0100
        thetext: closed several bugs that have been resolved for some time. Feel free to reopen the bug if you disagree.
