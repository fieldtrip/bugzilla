+p_xml: 'version="1.0" encoding="UTF-8" standalone="yes" '
+directive: DOCTYPE bugzilla SYSTEM "http://bugzilla.fieldtriptoolbox.org/page.cgi?id=bugzilla.dtd"
bugzilla:
  +@version: 4.4.1
  +@urlbase: http://bugzilla.fieldtriptoolbox.org/
  +@maintainer: r.oostenveld@donders.ru.nl
  bug:
    bug_id: "1180"
    creation_ts: 2011-11-23 10:53:00 +0100
    short_desc: nanmean does not behave like mean
    delta_ts: 2012-01-12 11:26:24 +0100
    reporter_accessible: "1"
    cclist_accessible: "1"
    classification_id: "1"
    classification: Unclassified
    product: FieldTrip
    component: core
    version: unspecified
    rep_platform: PC
    op_sys: Windows
    bug_status: CLOSED
    resolution: FIXED
    bug_file_loc:
    status_whiteboard:
    keywords:
    priority: P3
    bug_severity: normal
    target_milestone: '---'
    everconfirmed: "1"
    reporter:
      +content: a.stolk8
      +@name: Arjen Stolk
    assigned_to:
      +content: j.schoffelen
      +@name: Jan-Mathijs Schoffelen
    cc:
      - b.reuderink
      - j.schoffelen
      - lennartverhagen
    comment_sort_order: oldest_to_newest
    long_desc:
      - +@isprivate: "0"
        commentid: "4191"
        comment_count: "0"
        who:
          +content: a.stolk8
          +@name: Arjen Stolk
        bug_when: 2011-11-23 10:53:53 +0100
        thetext: "Proposal from Lennart:\n\nNow if the dimension of operation is not given, nanmean tries to guess using the code below. This is limited in two ways: dim cannot be higher than 3, and dim cannot be []. Both should be possible (and are in the default 'mean').\n\nOLD CODE\n\n    if size(in,1) ~= 1\n        dim = 1;\n    elseif size(in,2) ~= 1\n        dim = 2;\n    else \n        dim = 3; \n    end;\n\nPROPOSAL\ndim = find(size(in)>1,1,'first');\n\nif this line is used the output of nanmean([]) is NaN, as in mean([]).\n\n\nALTERNATIVE\ndim = find(size(in)~=1,1,'first');\n\nthis will result in the following behavior. nanmean([]) is [] (not NaN)."
      - +@isprivate: "0"
        commentid: "4198"
        comment_count: "1"
        who:
          +content: j.schoffelen
          +@name: Jan-Mathijs Schoffelen
        bug_when: 2011-11-23 11:16:44 +0100
        thetext: "thanks for the suggestion. \nnote that nanmean is just a placeholder for a mex-file. the mex-file should work consistent with matlab's mean. The m-code is the crappy code copied from eeglab.\n\n@Arjen: I assign this to you, could you change the code according to Lennart's suggestion, test and commit? thanks.\n\nNB: also look at nanstd nanvar and nansum please"
      - +@isprivate: "0"
        commentid: "4199"
        comment_count: "2"
        who:
          +content: j.schoffelen
          +@name: Jan-Mathijs Schoffelen
        bug_when: 2011-11-23 11:17:08 +0100
        thetext: and kindly ask Lennart to create a bugzilla account
      - +@isprivate: "0"
        commentid: "4210"
        comment_count: "3"
        who:
          +content: lennartverhagen
          +@name: Lennart Verhagen
        bug_when: 2011-11-23 11:48:40 +0100
        thetext: |-
          nanmean is already a placeholder for a mex-file? Right, I had no idea (I didn't even check for that). I just noticed the difference between the nanmean I wrote myself and the one I found in FieldTrip. Thanks for your help!


          On another note, these placeholders usually have a line trailing in the comments (% Built-in function.). Is this also the case for FieldTrip mex-files?
      - +@isprivate: "0"
        commentid: "4219"
        comment_count: "4"
        who:
          +content: j.schoffelen
          +@name: Jan-Mathijs Schoffelen
        bug_when: 2011-11-23 12:24:46 +0100
        thetext: |-
          @On another note, these placeholders usually have a line trailing in the
          comments (% Built-in function.). Is this also the case for FieldTrip mex-files?



          Good point. Well, actually no. We decided to mex the nanmean because the overloaded m-file currently is very memory inefficient. If your implementation is less clunky we could consider replacing the code (with your permission of course).

          Also, note that the nanXXX are not built-in functions but are in the statistics-toolbox. Irrespectively it's worthwile to include some documentation in the function that it also exists as a mex-file.
      - +@isprivate: "0"
        commentid: "4645"
        comment_count: "5"
        who:
          +content: b.reuderink
          +@name: Boris Reuderink
        bug_when: 2012-01-03 12:33:15 +0100
        thetext: Changed bug status to assigned to reflect JM prosaic assignment.
      - +@isprivate: "0"
        commentid: "4741"
        comment_count: "6"
        who:
          +content: a.stolk8
          +@name: Arjen Stolk
        bug_when: 2012-01-11 11:02:09 +0100
        thetext: |-
          Added to documentation of private/nanmean, nanstd, nansum, nanvar:

          Note: all nanXXX.m functionalities are implemented through mex-files that are more memory efficient. The code in the MATLAB mfile is not necessarily identical to that in the max-file.

          Nanstandardise does not have a related mex-file. But I changed its first line from 'function standardise' to 'function 'nanstandardise', compatible with the functionname.
      - +@isprivate: "0"
        commentid: "4742"
        comment_count: "7"
        who:
          +content: a.stolk8
          +@name: Arjen Stolk
        bug_when: 2012-01-11 11:02:33 +0100
        thetext: Fixed, see below/above.
      - +@isprivate: "0"
        commentid: "4757"
        comment_count: "8"
        who:
          +content: j.schoffelen
          +@name: Jan-Mathijs Schoffelen
        bug_when: 2012-01-11 15:36:19 +0100
        thetext: |-
          Still, Lennart's suggestion is still a very good one, i.e. if dim is not defined as an input argument, let

          dim = find(size(in)>1,1,'first');
      - +@isprivate: "0"
        commentid: "4758"
        comment_count: "9"
        who:
          +content: j.schoffelen
          +@name: Jan-Mathijs Schoffelen
        bug_when: 2012-01-11 15:41:03 +0100
        thetext: |-
          Still, Lennart's suggestion is still a very good one, i.e. if dim is not defined as an input argument, let

          dim = find(size(in)>1,1,'first');
      - +@isprivate: "0"
        commentid: "4759"
        comment_count: "10"
        who:
          +content: j.schoffelen
          +@name: Jan-Mathijs Schoffelen
        bug_when: 2012-01-11 15:41:34 +0100
        thetext: changed in revision 5128
      - +@isprivate: "0"
        commentid: "4760"
        comment_count: "11"
        who:
          +content: a.stolk8
          +@name: Arjen Stolk
        bug_when: 2012-01-11 15:52:31 +0100
        thetext: |-
          Oki doki. :)
          (In reply to comment #10)
