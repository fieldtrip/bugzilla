+p_xml: 'version="1.0" encoding="UTF-8" standalone="yes" '
+directive: DOCTYPE bugzilla SYSTEM "http://bugzilla.fieldtriptoolbox.org/page.cgi?id=bugzilla.dtd"
bugzilla:
  +@version: 4.4.1
  +@urlbase: http://bugzilla.fieldtriptoolbox.org/
  +@maintainer: r.oostenveld@donders.ru.nl
  bug:
    bug_id: "2514"
    creation_ts: 2014-03-26 12:40:00 +0100
    short_desc: implement kappa truncated-svd for beamformer covariance inverse
    delta_ts: 2019-04-01 08:56:28 +0200
    reporter_accessible: "1"
    cclist_accessible: "1"
    classification_id: "1"
    classification: Unclassified
    product: FieldTrip
    component: inverse
    version: unspecified
    rep_platform: PC
    op_sys: Mac OS
    bug_status: CLOSED
    resolution: FIXED
    bug_file_loc:
    status_whiteboard:
    keywords:
    priority: P5
    bug_severity: minor
    target_milestone: '---'
    everconfirmed: "1"
    reporter:
      +content: r.oostenveld
      +@name: Robert Oostenveld
    assigned_to:
      +content: j.schoffelen
      +@name: Jan-Mathijs Schoffelen
    cc:
      - j.schoffelen
      - Janne.Hamalainen
      - jarkko.luoma
      - Jukka.Nenonen
      - lau.moller.andersen
      - Liisa.Helle
      - r.bastiaannet
      - Samu.Taulu
      - stephen.whitmarsh
    comment_sort_order: oldest_to_newest
    long_desc:
      - +@isprivate: "0"
        commentid: "13166"
        comment_count: "0"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2014-03-26 12:40:35 +0100
        thetext: |-
          I had an discussion over email with Jukka Nenonen, who indicated that for MaxFiltered Elekta data it is desireable to have a user-configurable "kappa" parameter to do a truncated-svd in the inverse of the covariance for beamforming.

          Although most details are currently in the emails, I'll follow it up here in proper FieldTrip development style, CCing the people involved at Elekta.
      - +@isprivate: "0"
        commentid: "15033"
        comment_count: "1"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2015-01-09 12:53:19 +0100
        thetext: "Reminder to myself: we just discussed this at the MEG-UK meeting, related to a presentation of Gary Green.\n\nAlso, in the FT-SPM data analysis workshop we had 6 maxfiltered runs appended, which required a fix for the beamforming (see http://fieldtrip.fcdonders.nl/workshop/meg-uk-2015/fieldtrip-beamformer-demo). \n\nHaving this cleanly implemented would make it easier to explain. Implementing this is not a lot of work."
      - +@isprivate: "0"
        commentid: "16016"
        comment_count: "2"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2015-08-19 17:47:17 +0200
        thetext: |-
          Lambda now allows for (fieldtrip/inverse/beamforing_dics) this, although I realise that it is not fully documented

          % it is difficult to give a quantitative estimate of lambda, therefore also
          % support relative (percentage) measure that can be specified as string (e.g. '10%')
          if ~isempty(lambda) && ischar(lambda) && lambda(end)=='%'
            ratio = sscanf(lambda, '%f%%');
            ratio = ratio/100;
            lambda = ratio * trace(Cf)/size(Cf,1);
          end

          where in the end it is a number that is compared with the singular values. Kappa could be the same. But for kappa it is also a requirement to be able to specify the number of components to keep (or remove), i.e. a third type of specification.  So perhaps it could be

          cfg.lambda or cfg.lambda = number
          cfg.lambda or cfg.lambda = xx% in percent, compared to largest eigenvalue
          cfg.lambda or cfg.lambda = xx# as a number, counting the number from the largest down

          So in effect cfg.lambda='100%’ and cfg.lambda=‘1#’ would be the same, i.e. in both cases cfg.lambda would be set to the largest eigenvalue.
      - +@isprivate: "0"
        commentid: "19634"
        comment_count: "3"
        who:
          +content: j.schoffelen
          +@name: Jan-Mathijs Schoffelen
        bug_when: 2019-01-31 21:54:00 +0100
        thetext: "I have implemented ft_inv, and pushed this to the github repo. It supports various ways of computing an inverse, including \n- pinv after tikhonov regularization (FT's original only possibility)\n- truncated svd, based on a tolerance/kappa parameter\n- truncated svd, based on a tolerance/kappa parameter + 'winsorization' of the singular values below the threshold specified by lambda."
      - +@isprivate: "0"
        commentid: "19636"
        comment_count: "4"
        who:
          +content: j.schoffelen
          +@name: Jan-Mathijs Schoffelen
        bug_when: 2019-02-05 11:22:37 +0100
        thetext: switching status, because implemented
