+p_xml: 'version="1.0" encoding="UTF-8" standalone="yes" '
+directive: DOCTYPE bugzilla SYSTEM "http://bugzilla.fieldtriptoolbox.org/page.cgi?id=bugzilla.dtd"
bugzilla:
  +@version: 4.4.1
  +@urlbase: http://bugzilla.fieldtriptoolbox.org/
  +@maintainer: r.oostenveld@donders.ru.nl
  bug:
    bug_id: "2085"
    creation_ts: 2013-03-30 08:49:00 +0100
    short_desc: ft_senstype needs to be made faster
    delta_ts: 2013-12-09 11:16:37 +0100
    reporter_accessible: "1"
    cclist_accessible: "1"
    classification_id: "1"
    classification: Unclassified
    product: FieldTrip
    component: core
    version: unspecified
    rep_platform: PC
    op_sys: Mac OS
    bug_status: CLOSED
    resolution: FIXED
    bug_file_loc:
    status_whiteboard:
    keywords:
    priority: P3
    bug_severity: normal
    target_milestone: '---'
    everconfirmed: "1"
    reporter:
      +content: r.oostenveld
      +@name: Robert Oostenveld
    assigned_to:
      +content: r.oostenveld
      +@name: Robert Oostenveld
    cc:
      - j.schoffelen
      - jorn
    comment_sort_order: oldest_to_newest
    long_desc:
      - +@isprivate: "0"
        commentid: "9980"
        comment_count: "0"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2013-03-30 08:49:43 +0100
        thetext: I just noticed in the test script for bug 1775 that ft_senstype and ft_senslabel were taking most of the CPU time when computing some simple leadfields. This needs to be improved.
      - +@isprivate: "0"
        commentid: "9981"
        comment_count: "1"
        who:
          +content: j.schoffelen
          +@name: Jan-Mathijs Schoffelen
        bug_when: 2013-03-30 08:59:44 +0100
        thetext: moet jij geen eieren schilderen?
      - +@isprivate: "0"
        commentid: "9982"
        comment_count: "2"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2013-03-30 09:00:23 +0100
        thetext: |-
          I created a test script in the master branch, fieldtrip/test/test_bug2085.m

          commit 0f59d16f973bf714fb459a5d3c534df4f79087ad
          Date:   Sat Mar 30 08:57:31 2013 +0100
              enhancement - created test script for timing the leadfield computation

          To my surprise they both run very slowly (~1 leadfield per second).

          The profiler shows that in both cases most time is spent in ft_senstype, ft_senslabel and strmatch.
      - +@isprivate: "0"
        commentid: "9983"
        comment_count: "3"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2013-03-30 09:01:33 +0100
        thetext: |-
          (In reply to comment #1)

          zolang onze dochter nog lekker ligt uit te slapen (waarschijnlijk te lezen) gebruik ik even de tijd voor mezelf. En ik dacht: laat ik eens even een bug fixen, maar ja, dan kom je weer andere tegen...
      - +@isprivate: "0"
        commentid: "9984"
        comment_count: "4"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2013-03-30 09:11:01 +0100
        thetext: |-
          (In reply to comment #2)

          de paastakken zitten in de knoop, het script staat niet in master maar in branch bug2085.
      - +@isprivate: "0"
        commentid: "9986"
        comment_count: "5"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2013-04-01 09:59:58 +0200
        thetext: "I made some changes, notably that ft_compute_leadfield does not update the grad/elec on every call. \n\nSomehow ft_sourceparcellate.m got involved in this as well, it should have been in bug 1775.\n\nmbp> git merge bug2085\nUpdating f2ce7dd..508286b\nFast-forward\n forward/ft_compute_leadfield.m |    7 +-\n ft_sourceparcellate.m          |  291 ++++++++++++++++++++++++++++++++++++++++\n test/test_bug1775.m            |   61 +++++++++\n test/test_bug2085.m            |    9 +-\n 4 files changed, 364 insertions(+), 4 deletions(-)\n create mode 100644 ft_sourceparcellate.m\n create mode 100644 test/test_bug1775.m\n\nmbp> git push oostenveld master\nTotal 0 (delta 0), reused 0 (delta 0)\nTo git@github.com:oostenveld/fieldtrip.git\n   f2ce7dd..508286b  master -> master\nmbp> git pull fieldtrip master \nFrom github.com:fieldtrip/fieldtrip\n * branch            master     -> FETCH_HEAD\nAlready up-to-date.\n\nmbp> git push fieldtrip master\nCounting objects: 30, done.\nDelta compression using up to 2 threads.\nCompressing objects: 100% (21/21), done.\nWriting objects: 100% (21/21), 5.77 KiB, done.\nTotal 21 (delta 13), reused 0 (delta 0)\nTo git@github.com:fieldtrip/fieldtrip.git\n   f2ce7dd..508286b  master -> master"
      - +@isprivate: "0"
        commentid: "10232"
        comment_count: "6"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2013-04-23 12:06:02 +0200
        thetext: closed various bugs
      - +@isprivate: "0"
        commentid: "10257"
        comment_count: "7"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2013-04-23 12:06:31 +0200
        thetext: closed various bugs
      - +@isprivate: "0"
        commentid: "12284"
        comment_count: "8"
        who:
          +content: jorn
          +@name: JÃ¶rn M. Horschig
        bug_when: 2013-12-09 11:04:41 +0100
        thetext: |-
          the test script fails on a mentat because the lf computation time 'takes too long')
          the maximum ratio in the test script is 1.5, on a mentat the actual ratio is 1.65 (on my windows machine it is 1.01)

          I don't know what the ratio represents and what it should be and why, so I won't fix this and just report here ;)
      - +@isprivate: "0"
        commentid: "12285"
        comment_count: "9"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2013-12-09 11:16:37 +0100
        thetext: |-
          (In reply to comment #8)

          the ratio represents the time it takes to perform the same computation, but once with grad.type unknown and once with it known. When unknown, there is additional overhead, which makes the time longer. The overhead should not be too large, since we don't want to spend to time on that.
