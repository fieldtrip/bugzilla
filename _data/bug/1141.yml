+p_xml: 'version="1.0" encoding="UTF-8" standalone="yes" '
+directive: DOCTYPE bugzilla SYSTEM "http://bugzilla.fieldtriptoolbox.org/page.cgi?id=bugzilla.dtd"
bugzilla:
  +@version: 4.4.1
  +@urlbase: http://bugzilla.fieldtriptoolbox.org/
  +@maintainer: r.oostenveld@donders.ru.nl
  bug:
    bug_id: "1141"
    creation_ts: 2011-11-11 11:07:00 +0100
    short_desc: extend the ft_analysisprotocol function with reports on the callinfo
    delta_ts: 2012-03-14 10:00:41 +0100
    reporter_accessible: "1"
    cclist_accessible: "1"
    classification_id: "1"
    classification: Unclassified
    product: FieldTrip
    component: core
    version: unspecified
    rep_platform: All
    op_sys: All
    bug_status: CLOSED
    resolution: FIXED
    bug_file_loc:
    status_whiteboard:
    keywords:
    priority: P3
    bug_severity: enhancement
    target_milestone: '---'
    everconfirmed: "1"
    reporter:
      +content: r.oostenveld
      +@name: Robert Oostenveld
    assigned_to:
      +content: eelke.spaak
      +@name: Eelke Spaak
    cc: a.stolk8
    comment_sort_order: oldest_to_newest
    long_desc:
      - +@isprivate: "0"
        commentid: "3888"
        comment_count: "0"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2011-11-11 11:07:58 +0100
        thetext: |-
          Besides fieldtrip version, we are currently also recording the callinfo with matlab  version, user, time and mem use, etc.

          It would be nice to be able to also report those in ft_analysisprotocol, e.g. like
          cfg.showmatlabversion = yes, no
          cfg.showcomupter = yes, no
          cfg.showuser = yes, no
          cfg.showfunctionname = yes, no

          this would extend the boxes vertically, and print the additional information that was tracked in the cfg.previous.previous...

          and at the end include a summary like
          fprintf('the recorded analysis pipeline took in total %f hours to run', ...);
          fprintf('the recorded maximum memory requirement of the analysis pipeline was %d GB', ...);
      - +@isprivate: "0"
        commentid: "4065"
        comment_count: "1"
        who:
          +content: b.reuderink
          +@name: Boris Reuderink
        bug_when: 2011-11-17 10:46:46 +0100
        thetext: |-
          Changed the status of bugs without a specific owner to UNCONFIRMED. I'll try to replicate these bugs (potentially involving the submitter), and change confirmed bugs to NEW.

          Boris
      - +@isprivate: "0"
        commentid: "4092"
        comment_count: "2"
        who:
          +content: b.reuderink
          +@name: Boris Reuderink
        bug_when: 2011-11-17 13:31:55 +0100
        thetext: 'Is this related to bug #1142?'
      - +@isprivate: "0"
        commentid: "4109"
        comment_count: "3"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2011-11-17 14:15:01 +0100
        thetext: |-
          (In reply to comment #2)

          yes, related but neither is really dependent on the other. The history has to be fully kept (1142) and the history should be nicely visualized (1141)
      - +@isprivate: "0"
        commentid: "4527"
        comment_count: "4"
        who:
          +content: eelke.spaak
          +@name: Eelke Spaak
        bug_when: 2011-12-13 14:55:25 +0100
        thetext: I have committed the fix (revision 5028), but it might be wise if Robert or someone else tests the function with all its possible uses. I did not really know how to test the branching functionality, i.e. when does an analysis pipeline branch? (Depth is fine and tested by myself.) The entire algorithm for plotting the gui needed to be rewritten to accomodate flexibly sized boxes, so testing is probably a good idea.
      - +@isprivate: "0"
        commentid: "4528"
        comment_count: "5"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2011-12-13 16:08:32 +0100
        thetext: "(In reply to comment #4)\n\nbranching (when going upward, or merging when going downward) happens in functions that combine multiple inputs. E.g. grandaverage, or statistics. In that case cfg.previous = {varargin{1}.cfg, varargin{2}.cfg, ...}\n\nA new application for branching/merging is now also with sideways entry of previous cfgs in \n\nvolcfg = ...\nvol = ft_prepare_headmodel(volcfg)\n\nsourcecfg = ...\nsourcecfg.vol = vol; % note that this also contains the volcfg\nsource = ft_sourceanalysis(cfg, data)\n\nwhere the output source.cfg = data.cfg, but where source.cfg.vol.cfg is a \"sideways\" branch into the headmodel construction tree (which can contain a sequence of volumerealign, volumereslice, and volumesegment prior to ft_prepare_headmodel).\n\nThe visualisation of the sideways branching would probably best be done with something like\n\nfn = fieldnames(cfg)\nfor i=1:length(fn)\nif isa(cfg.(fn{i}), 'struct') && isfield(cfg.(fn{i}), 'cfg')\n  % sideways branch detected, do something with it\nend\n\nCould you still add this to the ft_analysisprotocol visualisation?"
      - +@isprivate: "0"
        commentid: "4789"
        comment_count: "6"
        who:
          +content: eelke.spaak
          +@name: Eelke Spaak
        bug_when: 2012-01-13 11:33:40 +0100
        thetext: Changing this to resolved again, to keep bugs tidy (one bug == one issue).
      - +@isprivate: "0"
        commentid: "5539"
        comment_count: "7"
        who:
          +content: eelke.spaak
          +@name: Eelke Spaak
        bug_when: 2012-03-14 10:00:41 +0100
        thetext: closing several bugs that have been RESOLVED for a long time
