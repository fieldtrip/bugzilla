+p_xml: 'version="1.0" encoding="UTF-8" standalone="yes" '
+directive: DOCTYPE bugzilla SYSTEM "http://bugzilla.fieldtriptoolbox.org/page.cgi?id=bugzilla.dtd"
bugzilla:
  +@version: 4.4.1
  +@urlbase: http://bugzilla.fieldtriptoolbox.org/
  +@maintainer: r.oostenveld@donders.ru.nl
  bug:
    bug_id: "3012"
    creation_ts: 2015-11-24 23:34:00 +0100
    short_desc: fltpadding doesn't work with data in memory
    delta_ts: 2016-06-14 16:14:51 +0200
    reporter_accessible: "1"
    cclist_accessible: "1"
    classification_id: "1"
    classification: Unclassified
    product: FieldTrip
    component: core
    version: unspecified
    rep_platform: PC
    op_sys: Windows
    bug_status: CLOSED
    resolution: FIXED
    see_also:
      - http://bugzilla.fieldtriptoolbox.org/show_bug.cgi?id=2978
      - http://bugzilla.fieldtriptoolbox.org/show_bug.cgi?id=3005
    bug_file_loc:
    status_whiteboard:
    keywords:
    priority: P5
    bug_severity: normal
    target_milestone: '---'
    everconfirmed: "1"
    reporter:
      +content: braingirl
      +@name: Teresa Madsen
    assigned_to:
      +content: r.oostenveld
      +@name: Robert Oostenveld
    cc: r.oostenveld
    comment_sort_order: oldest_to_newest
    long_desc:
      - +@isprivate: "0"
        commentid: "16432"
        comment_count: "0"
        who:
          +content: braingirl
          +@name: Teresa Madsen
        bug_when: 2015-11-24 23:34:48 +0100
        thetext: "I'm not exactly sure if this is a bug or if I'm just not understanding how this is supposed to work.  I think there are multiple problems here, which is why this is so long and complicated.  If it's not exactly broken, you can take this as a feature request to make it work the way I was hoping it would.  ;-)\n\nI've loaded my data from NEX files and am working on artifact rejection.  I parsed the continuous data into 100 chunks to allow for easier visualization without crashing my graphics card.  When I search for low frequency artifacts, I often get large edge artifacts at the beginning or end of these fake \"trials,\" so I tried to add filter padding, but it doesn't seem to work in this format.\n\n1) First, I tried this:\n\n    %% load continuous LFP data, all channels\n                                \n    cfg             = [];\n    cfg.dataset     = nexfile{r,p};\n    cfg.channel     = 'AD*';\n    cfg.continuous  = 'yes';\n    cfg.outputfile  = outputfile1;\n                                \n    data = ft_preprocessing(cfg);\n\n    %% break data into 100 chunks for visualization \n    % during artifact rejection process, will be \n    % re-merged before filtering\n                            \n    cfg                         = [];\n    cfg.dataset                 = nexfile{r,p};\n    cfg.trialdef.triallength    = floor(...\n        (data.sampleinfo(end,2)-...\n        data.sampleinfo(1,1))/100)/data.fsample;\n    cfg.trialdef.ntrials        = 100;\n                            \n    cfg = ft_definetrial(cfg);\n                                                        \n    data = ft_redefinetrial(cfg, data);\n    trl = data.cfg.trl;\n                                                    \n    %% define low frequency artifacts\n                                    \n    cfg                     = [];\n    cfg.trl                 = trl;\n                                    \n    % channel selection, cutoff and padding\n    cfg.artfctdef.zvalue.channel    = channels;\n    cfg.artfctdef.zvalue.cutoff     = 10;\n    cfg.artfctdef.zvalue.trlpadding = 0;\n    cfg.artfctdef.zvalue.fltpadding = 2;\n    cfg.artfctdef.zvalue.artpadding = 0.25;\n                                    \n    % algorithmic parameters\n    cfg.artfctdef.zvalue.lpfilter  = 'yes';\n    cfg.artfctdef.zvalue.lpfreq    = 1;\n    cfg.artfctdef.zvalue.rectify   = 'yes';\n    cfg.artfctdef.zvalue.boxcar    = 1;\n                                    \n    % make the process interactive\n    cfg.artfctdef.zvalue.interactive = 'yes';\n    disp(['Low frequency artifact detection for ' regions{t} '.']);\n                \n    [~, artifact.lowfreq{t}] = ft_artifact_zvalue(cfg,data);\n\nRunning that last cell gives these messages/errors:\n\n    Low frequency artifact detection for mPFC.\n    searching for artifacts in 7 channels\n    Subscript indices must either be real positive integers or logicals.\n\n    Error in ft_fetch_data (line 117)\n      count     = count    (begsample:endsample);\n\n    Error in ft_artifact_zvalue (line 285)\n          dat{trlop} = ft_fetch_data(data,        'header', hdr, 'begsample',\n          trl(trlop,1)-fltpadding, 'endsample', trl(trlop,2)+fltpadding, 'chanindx', sgnind,\n          'checkboundary', strcmp(cfg.continuous,'no'), 'skipcheckdata', 1);\n \n    117   count     = count    (begsample:endsample);\n\nI figured out that begsample is negative because it's looking for data before the first sample of the file, so I added a step to reject any NaNs and 2s before and after them and the beginning and end of the file.  It seems like it would be easier to just pad with zeros in this case (PROBLEM #1).\n\n2) Attempt 2, run the first 2 cells as above, then:\n\n    %% mark NaNs as artifacts\n                            \n    cfg                         = [];\n    cfg.artfctdef.nan.channel   = 'AD*';\n    cfg.artfctdef.nan.pretim = 2; % pre-artifact rejection interval in sec\n    cfg.artfctdef.nan.psttim    = 2;\n                            \n    [~, artifact.nan] = ft_artifact_nan(cfg,data);\n                            \n    %% also mark first & last 2 seconds of data as \n    % artifacts, to allow filter padding later\n                            \n    artifact.pad = [data.sampleinfo(1,1) ...\n        data.sampleinfo(1,1)+2000; ...\n        data.sampleinfo(end,2)-2000 ...\n        data.sampleinfo(end,2)];\n                            \n    %% remove NaNs & padding from data\n                            \n    cfg                         = [];\n    cfg.artfctdef.nan.artifact  = artifact.nan;\n    cfg.artfctdef.pad.artifact  = artifact.pad;\n    cfg.artfctdef.reject        = 'partial';\n                            \n    data = ft_rejectartifact(cfg,data);\n    trl = data.cfg.trl;\n\n    %% define low frequency artifacts\n                                    \n    cfg                     = [];\n    cfg.trl                 = trl;\n                                    \n    % channel selection, cutoff and padding\n    cfg.artfctdef.zvalue.channel    = channels;\n    cfg.artfctdef.zvalue.cutoff     = 10;\n    cfg.artfctdef.zvalue.trlpadding = 0;\n    cfg.artfctdef.zvalue.fltpadding = 2;\n    cfg.artfctdef.zvalue.artpadding = 0.25;\n                                    \n    % algorithmic parameters\n    cfg.artfctdef.zvalue.lpfilter  = 'yes';\n    cfg.artfctdef.zvalue.lpfreq    = 1;\n    cfg.artfctdef.zvalue.rectify   = 'yes';\n    cfg.artfctdef.zvalue.boxcar    = 1;\n                                    \n    % make the process interactive\n    cfg.artfctdef.zvalue.interactive = 'yes';\n    disp(['Low frequency artifact detection for ' regions{t} '.']);\n                \n    [~, artifact.lowfreq{t}] = ft_artifact_zvalue(cfg,data);\n\nWhen I run the last cell, I get the following messages/error:\n\n    Low frequency artifact detection for mPFC.\n    searching for artifacts in 7 channels\n    searching in trial 101 from 101\n\n    showing trial   1, channel AD02\n    Error using plot\n    Vectors must be the same length.\n\n    Error in ft_artifact_zvalue>redraw_cb (line 919)\n        plot(opt.h1, xval, yval, 'linestyle', '-', 'color', 'b', 'displayname', 'data');\n\n    Error in ft_artifact_zvalue (line 492)\n      redraw_cb(h);\n \n    919     plot(opt.h1, xval, yval, 'linestyle', '-', 'color', 'b', 'displayname', 'data');\n\nxval is a 1x57110 double, containing the sample numbers from \"trial\" 1.  yval is a 1x61110 double (the number of data points that would be in the padded trial - so PROBLEM #2 is that it's not removing the padding when it's time to plot the data), but contains all zeros because nansum was previously used on a matrix of all NaNs:\n\nft_artifact_zvalue, line 370\n    zsum{trlop} = nansum(zdata,1); % accumulate the z-values over channels\n\nzdata was all NaNs because dat{1} was padded with NaNs at the beginning because the data variable obviously didn't include any time before the first trial (I removed it to get it to work this much!).  Shouldn't that be padded with zeros instead, to allow the filter to work?  That's PROBLEM #3.\n\n3) My next approach was to feed in the raw continuous data, first using cfg.inputfile, with the trl configuration as defined above (100 chunks, minus 2s at beginning and end of file and around NaNs), and that opened a whole different can of worms:\n\n    %% define low frequency artifacts\n                                    \n    cfg                     = [];\n    cfg.inputfile           = outputfile1;\n    cfg.trl                 = trl;\n                                    \n    % channel selection, cutoff and padding\n    cfg.artfctdef.zvalue.channel = channels;\n    cfg.artfctdef.zvalue.cutoff     = 10;\n    cfg.artfctdef.zvalue.trlpadding = 0;\n    cfg.artfctdef.zvalue.fltpadding = 2;\n    cfg.artfctdef.zvalue.artpadding = 0.25;\n                                    \n    % algorithmic parameters\n    cfg.artfctdef.zvalue.lpfilter  = 'yes';\n    cfg.artfctdef.zvalue.lpfreq    = 1;\n    cfg.artfctdef.zvalue.rectify   = 'yes';\n    cfg.artfctdef.zvalue.boxcar    = 1;\n                                    \n    % make the process interactive\n    cfg.artfctdef.zvalue.interactive = 'yes';\n    disp(['Low frequency artifact detection for ' regions{t} '.']);\n                                    \n    [~, artifact.lowfreq{t}] = ft_artifact_zvalue(cfg);\n\nRunning that cell gives these messages/error:\n\n    Low frequency artifact detection for mPFC.\n    reading 'data' from file 'S:\\Teresa\\Analyses\\TempData\\Raw16LFPContData_200Conditioning.mat'\n    searching for artifacts in 7 channels\n    searching in trial 1 from 1\n\n    Reference to non-existent field 'datafile'.\n\n    Error in ft_artifact_zvalue>redraw_cb (line 900)\n      data = ft_read_data(cfg.datafile,   'header', hdr, 'begsample', trl(trlop,1),\n      'endsample', trl(trlop,2), 'chanindx', sgnind, 'checkboundary',\n      strcmp(cfg.continuous,'no'));\n\n    Error in ft_artifact_zvalue (line 492)\n      redraw_cb(h);\n\nThis error occurs because opt.data was left empty on line 473, because nargin==1 (PROBLEM #4).  I think line 472 should be changed to \"if ~hasdata\".\n\nBut even with that fixed, note that it's \"searching in trial 1 from 1\" instead of 101 as before, which is because it ignores cfg.trl and uses data.sampleinfo instead (PROBLEM #5).  And problem 2 still happens.\n\n4) This is my current workaround, sending ft_artifact_zvalue back to the original NEX file, but it takes way longer than just passing in the already loaded data.\n\n    %% define low frequency artifacts\n                                    \n    cfg                     = [];\n    cfg.dataset             = nexfile{r,p};\n    cfg.trl                 = trl;\n                                    \n    % channel selection, cutoff and padding\n    cfg.artfctdef.zvalue.channel = channels;\n    cfg.artfctdef.zvalue.cutoff     = 10;\n    cfg.artfctdef.zvalue.trlpadding = 0;\n    cfg.artfctdef.zvalue.fltpadding = 2;\n    cfg.artfctdef.zvalue.artpadding = 0.25;\n                                    \n    % algorithmic parameters\n    cfg.artfctdef.zvalue.lpfilter  = 'yes';\n    cfg.artfctdef.zvalue.lpfreq    = 1;\n    cfg.artfctdef.zvalue.rectify   = 'yes';\n    cfg.artfctdef.zvalue.boxcar    = 1;\n                                    \n    % make the process interactive\n    cfg.artfctdef.zvalue.interactive = 'yes';\n    disp(['Low frequency artifact detection for ' regions{t} '.']);\n                                    \n    [~, artifact.lowfreq{t}] = ft_artifact_zvalue(cfg);\n                                    \nWhat would make even more sense would be to have the option of feeding in the continuous data (as I tried in #3), letting that be what gets filtered, but then display based on the info in cfg.trl.  But then again, my NaNs would break that.  So, I think the BEST solution would be to concatenate all contiguous samples in the data structure, pad those long chunks with zeros, filter, and then drop the padding and re-parse the trials for plotting.\n\nLet me know if that makes any sense."
      - +@isprivate: "0"
        commentid: "16444"
        comment_count: "1"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2015-11-26 11:31:18 +0100
        thetext: "Regarding \"I parsed the continuous data into 100 chunks to allow for easier visualisation\" -> ft_databrowser was designed to visualise data either from disk or from memory. When reading for disk, it will only read the section that is needed. We designed this for ~100 GB datasets. This is something to consider when working with large data.\n\nRegarding visualizing, you can use ft_databrowser to show a small part of a continuous recording that is in memory. This will show one-second segments:\n\ndata = [];\ndata.label = {'1'}\ndata.time{1} = (1:100000)/1000;\ndata.trial{1} = randn(1, length(data.time{1}));\nft_databrowser([], data)\n\nSo I don't understand the initial problem (yet). It might be that I am overlooking some peculiarity that is due to the NEX files.\n\n\nBut moving on to the question about padding, first of all I tried replicating your situation (with the fake data from above):\n\ncfg = [];\ncfg.artfctdef.zvalue.cutoff = 3\ncfg.artfctdef.zvalue.trlpadding = 0;\ncfg.artfctdef.zvalue.fltpadding = 2;\ncfg.artfctdef.zvalue.artpadding = 0.25;\ncfg.artfctdef.zvalue.lpfilter  = 'yes';\ncfg.artfctdef.zvalue.lpfreq    = 1;\ncfg.artfctdef.zvalue.rectify   = 'yes';\ncfg.artfctdef.zvalue.boxcar    = 1;\ncfg.artfctdef.zvalue.channel = 'all'\ncfg.artfctdef.zvalue.interactive = 'yes';\nft_artifact_zvalue(cfg, data)\n\n\nI ran into two problems, which I just fixed. See https://github.com/fieldtrip/fieldtrip/commit/271560f4cfd7e127535f49cc5b5cd0bed356dd31 for details.\nmac011> svn commit utilities/ft_fetch_data.m private/preproc.m\nSending        private/preproc.m\nSending        utilities/ft_fetch_data.m\nTransmitting file data ..\nCommitted revision 10940.\n\nWith the code above, filtering is not done (as per design) since the padding extends outside the available data.\n\ncfg = []\ncfg.trl(:,1) = 1:1000:100000;\ncfg.trl(:,2) = 999+(1:1000:100000);\ncfg.trl(:,3) = 0;\nsegmented = ft_redefinetrial(cfg, data)\n\nAlso here I ran into problems\n\nmac011> svn commit \nSending        ft_artifact_zvalue.m\nSending        utilities/ft_fetch_data.m\nTransmitting file data ..\nCommitted revision 10942.\n\nNow it works as I expect. The first two trials in zvalue are not handled very well because the requested filter padding extends beyond the available data, causing the filter NOT to be applied. \n\nI am surprised about the lack of warnings (it is only shown once). This commit will make sure that the warning is more visible.\n   \nmac011> svn commit ft_artifact_zvalue.m private/preproc.m \nSending        ft_artifact_zvalue.m\nSending        private/preproc.m\nTransmitting file data ..\nCommitted revision 10944.\n\nWith these changes to the code, could you please re-evaluate your issues?"
      - +@isprivate: "0"
        commentid: "16480"
        comment_count: "2"
        who:
          +content: braingirl
          +@name: Teresa Madsen
        bug_when: 2015-12-01 18:54:36 +0100
        thetext: |-
          (In reply to Robert Oostenveld from comment #1)
          Thanks, that does work better, but still not great.  To answer your first question, yes, I know databrowser can display continuous data with no problem, and I do use it to review the detected artifacts before rejecting them, but my graphics problems occur while interactively selecting the z-value threshold for artifact detection, at which point it does try to plot the entire "single trial" at once.

          So, for the chopped data, your fixes now get me to the ft_artifact_zvalue GUI with no errors, but as you said, there are no filters applied to the first and last trials, so those skew the z-value detection and are pretty much completely lost, if I set the threshold to a reasonable level for the rest of the data.  I could work around that by creating trials just for padding, but wouldn't it be nice to add an option to pad with 0s instead of NaNs?

          For the continuous data, I first run into Bug 3005 (http://bugzilla.fieldtriptoolbox.org/show_bug.cgi?id=3005), which no one has replied to, but that's an easy fix.  After that, I get to the ft_artifact_zvalue GUI with no more errors, but it's very sluggish and gets finicky because of the large amount of data being displayed.  Minor problems include the data disappearing from view after I've zoomed in and back out (but it comes back when I click another GUI button, as this refreshes the data), and major problems include my monitor going into powersave mode because the graphics card has completely stopped.  Sometimes it recovers with a graphics driver error (sends me to this link:  http://nvidia.custhelp.com/app/answers/detail/a_id/3007) and I just have to restart Matlab, but other times I have to force the computer to reboot.  I may need a new graphics driver or card or something, but this problem only occurs when trying to display large amounts of continuous data like this - hence my desire to break it up.
      - +@isprivate: "0"
        commentid: "16481"
        comment_count: "3"
        who:
          +content: braingirl
          +@name: Teresa Madsen
        bug_when: 2015-12-01 22:14:35 +0100
        thetext: "(In reply to Teresa Madsen from comment #2)\nHere's the workaround I came up with:  \n\n    load(outputfile1); % from the 1st cell in my original message\n\n    %% mark NaNs as artifacts\n                            \n    cfg                         = [];\n    cfg.artfctdef.nan.channel   = 'AD*';\n                            \n    [~, artifact.nan] = ft_artifact_nan(cfg,data);\n                            \n    %% remove NaNs from data\n                            \n    cfg                         = [];\n    cfg.artfctdef.nan.artifact  = artifact.nan;\n    cfg.artfctdef.reject        = 'partial';\n                            \n    data = ft_rejectartifact(cfg,data);\n    otrl = data.cfg.trl; % original trl structure\n                            \n    %% divide continuous data into ~30s chunks,\n    % with 2s \"trials\" at beginning and end that\n    % will be lost to padding with NaNs\n                            \n    padsec = 2; % seconds of padding to add\n    padsamp = ceil(padsec*data.fsample); % # of samples\n    trlsec = 30; % minimum length of trials\n    trlsamp = ceil(trlsec*data.fsample); % # of samples\n    ntrl = cell(size(otrl,1),1);\n                            \n    for ot = 1:size(otrl,1)     % original trial #\n        otlen = otrl(ot,2)-otrl(ot,1);  % ot length\n        if otlen < (2*padsamp) % if less than 4s of data between NaNs\n            warning(['Skipping original trial # ' ...\n                int2str(ot) ...\n                ' because of insufficient length.']);\n            ntrl{ot} = [];\n        else\n            nnt = floor((otlen ... % number of new trials\n                - (2*padsamp)) ... % minus 4 seconds lost to padding\n                /trlsamp); % divided by min trial length\n            ntlen = floor((otlen ... % new trial length\n                - (2*padsamp)) ... % minus 4 seconds lost to padding\n                /nnt); % divided by # of new trials\n            ntrl{ot} = nan([nnt+2 2]); % preallocate space\n            ntrl{ot}(1,:) = [otrl(ot,1) ...\n                (otrl(ot,1) + padsamp)];\n            for nt = 1:nnt  % new trial #\n                ntrl{ot}(nt+1,:) = [(ntrl{ot}(nt,2)+1) ...\n                    ((ntrl{ot}(nt,2)+1) + ntlen-1)];\n            end\n            ntrl{ot}(nnt+2,:) = [(ntrl{ot}(nnt+1,2)+1) ...\n                ((ntrl{ot}(nnt+1,2)+1) + padsamp)];\n            if ntrl{ot}(1,1) ~= otrl(ot,1) ...\n                || ntrl{ot}(end,2) > otrl(ot,2) ...\n                || any(any(isnan(ntrl{ot})))\n                error(['something is wrong with ntrl{' ...\n                    int2str(ot) '}']);\n            end\n        end\n    end\n                            \n    ttrl = vertcat(ntrl{:});    % temp trl\n    trl = [ttrl ttrl(:,1)]; % add offset from beginning of file\n    % TO DO:  change to offset from nearest tone\n    % (probably by adding this cell's function to\n    % my_trialfun)\n                            \n    %% restructure data into those chunks\n                            \n    cfg         = [];\n    cfg.trl     = trl;\n                            \n    data = ft_redefinetrial(cfg, data);\n                            \n% ... farther down in my script ...\n\n    %% define low frequency artifacts\n                                    \n    cfg                     = [];\n    cfg.trl                 = trl;\n                                    \n    % channel selection, cutoff and padding\n    cfg.artfctdef.zvalue.channel = channels;\n    cfg.artfctdef.zvalue.cutoff     = 10;\n    cfg.artfctdef.zvalue.trlpadding = 0;\n    cfg.artfctdef.zvalue.fltpadding = 2;\n    cfg.artfctdef.zvalue.artpadding = 0.25;\n                                    \n    % algorithmic parameters\n    cfg.artfctdef.zvalue.lpfilter  = 'yes';\n    cfg.artfctdef.zvalue.lpfreq    = 1;\n    cfg.artfctdef.zvalue.rectify   = 'yes';\n    cfg.artfctdef.zvalue.boxcar    = 1;\n                                    \n    % make the process interactive\n    cfg.artfctdef.zvalue.interactive = 'yes';\n    disp(['Low frequency artifact detection for ' ...\n        regions{t} '.']);\n                                    \n    [~, artifact.lowfreq{t}] = ft_artifact_zvalue(cfg,data);\n\n^ This works fine, just eliminating the 2s trials I built in for the purpose of padding.  But again, simply adding an option to pad with 0s seems easier."
      - +@isprivate: "0"
        commentid: "16553"
        comment_count: "4"
        who:
          +content: braingirl
          +@name: Teresa Madsen
        bug_when: 2015-12-22 22:29:04 +0100
        thetext: I guess you fixed what was broken, and my workaround is sufficient for what I need to do, so I'll close this bug.  Thanks.
      - +@isprivate: "0"
        commentid: "17490"
        comment_count: "5"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2016-06-14 16:14:51 +0200
        thetext: Hereby I am closing multiple bugs that have been resolved for some time now. If you don't agree to the resolution, please reopen.
