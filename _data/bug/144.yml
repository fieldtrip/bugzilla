+p_xml: 'version="1.0" encoding="UTF-8" standalone="yes" '
+directive: DOCTYPE bugzilla SYSTEM "http://bugzilla.fieldtriptoolbox.org/page.cgi?id=bugzilla.dtd"
bugzilla:
  +@version: 4.4.1
  +@urlbase: http://bugzilla.fieldtriptoolbox.org/
  +@maintainer: r.oostenveld@donders.ru.nl
  bug:
    bug_id: "144"
    creation_ts: 2010-09-02 16:30:00 +0200
    short_desc: peer slaves seem to switch to zombie while the master is sending a job
    delta_ts: 2011-01-05 12:01:10 +0100
    reporter_accessible: "1"
    cclist_accessible: "1"
    classification_id: "1"
    classification: Unclassified
    product: FieldTrip
    component: peer
    version: unspecified
    rep_platform: PC
    op_sys: Mac OS
    bug_status: CLOSED
    resolution: FIXED
    bug_file_loc:
    status_whiteboard:
    keywords:
    priority: P1
    bug_severity: normal
    target_milestone: '---'
    everconfirmed: "1"
    reporter:
      +content: r.oostenveld
      +@name: Robert Oostenveld
    assigned_to:
      +content: r.oostenveld
      +@name: Robert Oostenveld
    comment_sort_order: oldest_to_newest
    long_desc:
      - +@isprivate: "0"
        commentid: "289"
        comment_count: "0"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2010-09-02 16:30:00 +0200
        thetext: |-
          I observed that the master sends many jobs to the slaves and that due to  smartcpu some of the idle slaves immediately switch to zombie. So far, so good. But then it seems that the master initially thinks that the jobs have been submitted, which then after some time have to be resubmitted because they don't return.

          Since resubmission is postponed, the failed jobs delay the completion of the full batch considerably.

          The problem suggests that the tcpserver accepts a job, while the announce thread (calling smartcpu_update and smartmem_update) the status is toggled. The locking of the mutexhost in the announce thread should be checked, and potentially prolonged.
      - +@isprivate: "0"
        commentid: "290"
        comment_count: "1"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2010-09-02 17:02:50 +0200
        thetext: "note that this was observed with \n\n>> peercellfun(@peertest, repmat({1000}, 1, n), repmat({30}, 1, n));   \n\nand\n\n>> type peertest\n\nfunction peertest(x, y)\n\n% use the memory\ntmp1 = zeros(x*1024*1024/8,1);\n\n% create the cpu load\nstopwatch = tic;\nwhile toc(stopwatch)<y\n  tmp2 = inv(randn(100));\nend"
      - +@isprivate: "0"
        commentid: "300"
        comment_count: "2"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2010-09-07 17:25:31 +0200
        thetext: "This has been resolved. It was due to smartcpu being triggered when starting the MATLAB engine. The timing differences seem to be due to differences in memory-allocation speed on mentat005 (fast) and mentat24x (slow). \n\nFurthermore, the resubmission in peercellfun has been improved (not sequential, but parallel)."
      - +@isprivate: "0"
        commentid: "840"
        comment_count: "3"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2011-01-05 11:57:05 +0100
        thetext: selected a long list of resolved bugs from roboos and changed the status into "RESOLVED"
      - +@isprivate: "0"
        commentid: "919"
        comment_count: "4"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2011-01-05 12:01:10 +0100
        thetext: selected all old bugs from roboos with status RESOLVED and changed it into CLOSED
