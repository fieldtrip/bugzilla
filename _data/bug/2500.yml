+p_xml: 'version="1.0" encoding="UTF-8" standalone="yes" '
+directive: DOCTYPE bugzilla SYSTEM "http://bugzilla.fieldtriptoolbox.org/page.cgi?id=bugzilla.dtd"
bugzilla:
  +@version: 4.4.1
  +@urlbase: http://bugzilla.fieldtriptoolbox.org/
  +@maintainer: r.oostenveld@donders.ru.nl
  bug:
    bug_id: "2500"
    creation_ts: 2014-03-14 14:08:00 +0100
    short_desc: why is cfg.latency in ft_timelockanalysis deprecated?
    delta_ts: 2014-06-18 12:32:13 +0200
    reporter_accessible: "1"
    cclist_accessible: "1"
    classification_id: "1"
    classification: Unclassified
    product: FieldTrip
    component: core
    version: unspecified
    rep_platform: PC
    op_sys: Windows
    bug_status: CLOSED
    resolution: FIXED
    bug_file_loc:
    status_whiteboard:
    keywords:
    priority: P5
    bug_severity: normal
    target_milestone: '---'
    everconfirmed: "1"
    reporter:
      +content: eelke.spaak
      +@name: Eelke Spaak
    assigned_to:
      +content: j.schoffelen
      +@name: Jan-Mathijs Schoffelen
    cc:
      - johanna.zumer
      - jorn
      - n.lam
    comment_sort_order: oldest_to_newest
    long_desc:
      - +@isprivate: "0"
        commentid: "13081"
        comment_count: "0"
        who:
          +content: eelke.spaak
          +@name: Eelke Spaak
        bug_when: 2014-03-14 14:08:13 +0100
        thetext: |-
          (See also bug 744 ("cfg.latency should be made forbidden/deprecated in ft_timelockanalysis", closed) and bug 745 ("similar to cfg.trials and cfg.channel, functions should get an option cfg.latency", still open :) .)

          I think it would be very helpful. Note, by the way, that right now specifying cfg.latency results in a deprecation warning, however the parameter has no effect, which might be a bit confusing to the user. I would be in favour of re-implementing cfg.latency functionality, rather than making it forbidden. In any case, keeping it deprecated is undesired, as it does not work at the moment.
      - +@isprivate: "0"
        commentid: "13082"
        comment_count: "1"
        who:
          +content: eelke.spaak
          +@name: Eelke Spaak
        bug_when: 2014-03-14 14:10:29 +0100
        thetext: YAY! Bug 2500 :D
      - +@isprivate: "0"
        commentid: "13083"
        comment_count: "2"
        who:
          +content: johanna.zumer
          +@name: Johanna
        bug_when: 2014-03-14 14:11:30 +0100
        thetext: See also bug 656 and discussion of cfg.covlatency
      - +@isprivate: "0"
        commentid: "13084"
        comment_count: "3"
        who:
          +content: jorn
          +@name: Jörn M. Horschig
        bug_when: 2014-03-14 14:22:05 +0100
        thetext: "If I recall correctly, one reason was that data management should be in hands of the user by immediate calls to high-level functions. That means that the user should call ft_selectdata first before calling ft_timelockanalysis. This is bug 1376. As this is obviously not correspondance with bug 745. \nDo we need to discuss this in the next meeting and settle on these guidelines? I think it would be great if we finally settle on what cfg options should be shared across (similar) functions and what rationale we want to use for that."
      - +@isprivate: "0"
        commentid: "13085"
        comment_count: "4"
        who:
          +content: eelke.spaak
          +@name: Eelke Spaak
        bug_when: 2014-03-14 14:24:39 +0100
        thetext: |-
          (In reply to Jörn M. Horschig from comment #3)
          Good idea to discuss this.

          I already guessed that something like this was the rationale. However, I also recall a fairly recent discussion about the cfg.preproc.xxx option for ft_timelockanalysis, and in the end we decided to keep that. To me a cfg.latency 'shorthand' option would make more sense than a preproc shorthand option, so I guess we by the same rationale should then also vote to keep cfg.latency and cfg.channel and cfg.trials.
      - +@isprivate: "0"
        commentid: "13086"
        comment_count: "5"
        who:
          +content: johanna.zumer
          +@name: Johanna
        bug_when: 2014-03-14 14:37:59 +0100
        thetext: One aspect of bug 656 also was the idea that ft_timelockanalysis could call itself with a series of latencies, so that the covariance over many adjacent/overlapping time windows could created from a longer time window as input data.   I did create all this in a version that was never committed, but is sitting in the 'attachments' of bug 656.  That used cfg.toi rather than latency to be more in line with ft_freqanalysis.
      - +@isprivate: "0"
        commentid: "13196"
        comment_count: "6"
        who:
          +content: n.lam
          +@name: ""
        bug_when: 2014-04-02 13:28:43 +0200
        thetext: 'Discussed (20140402): By executive vote we voted against cfg.latency to be re-implemented. It should be made forbidden. The functionality, although similar to channel and trials, is more trivial than channel and trials, and it moreover does not affect the output (as opposed to trials).'
      - +@isprivate: "0"
        commentid: "13198"
        comment_count: "7"
        who:
          +content: j.schoffelen
          +@name: Jan-Mathijs Schoffelen
        bug_when: 2014-04-02 14:29:38 +0200
        thetext: |-
          bash-4.1$ svn commit -m "enhancement - changed some options from deprecated to forbidden, bug 2500" ft_timelockanalysis.m
          Sending        ft_timelockanalysis.m
          Transmitting file data .
          Committed revision 9335.
