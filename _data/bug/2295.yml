+p_xml: 'version="1.0" encoding="UTF-8" standalone="yes" '
+directive: DOCTYPE bugzilla SYSTEM "http://bugzilla.fieldtriptoolbox.org/page.cgi?id=bugzilla.dtd"
bugzilla:
  +@version: 4.4.1
  +@urlbase: http://bugzilla.fieldtriptoolbox.org/
  +@maintainer: r.oostenveld@donders.ru.nl
  bug:
    bug_id: "2295"
    creation_ts: 2013-09-20 18:05:00 +0200
    short_desc: peerlist receives no job-information, causing all jobs to be resubmitted after the set 60 seconds
    delta_ts: 2013-09-23 11:13:01 +0200
    reporter_accessible: "1"
    cclist_accessible: "1"
    classification_id: "1"
    classification: Unclassified
    product: FieldTrip
    component: peer
    version: unspecified
    rep_platform: PC
    op_sys: Windows
    bug_status: ASSIGNED
    resolution:
    bug_file_loc:
    status_whiteboard:
    keywords:
    priority: P3
    bug_severity: normal
    target_milestone: '---'
    everconfirmed: "1"
    reporter:
      +content: roemer.van.der.meij
      +@name: Roemer van der Meij
    assigned_to:
      +content: r.oostenveld
      +@name: Robert Oostenveld
    comment_sort_order: oldest_to_newest
    long_desc:
      - +@isprivate: "0"
        commentid: "11379"
        comment_count: "0"
        who:
          +content: roemer.van.der.meij
          +@name: Roemer van der Meij
        bug_when: 2013-09-20 18:05:27 +0200
        thetext: "I happen to come across this while using the p2p toolbox on our new DCC cluster.\n\nThis is within machine. I start one master, and a set of slaves, having specific groups, groupallows and userallows. The jobs get submitted using peercellfun, and executed nicely. However, after the 60s delay at line 471, the status of the lastseen variable is an inf for all submitted jobs. The jobs are correctly seen as submitted (all ones). \n\nAfter closer inspection, a probably looks to be peerlist. When calling peerlist as list = peerlist('busy'), I get a mostly correct structure array for all running peers. Except that list(i).current (containing the job info), is largely 'empty'.\n\nAn example:\nOn some matlab terminals:\npeerslave('allowuser','roevdmei','allowgroup','arch2','memavail',4294967296','timavail',1209600)\n\nOn my main matlab terminal\npeermaster('group','arch2','allowgroup','arch2','allowuser','roevdmei')\n**submiting some jobs, which get executed on the peers (and retrieved later on)**\nlist = peerlist('busy')\nlist(i) = \n      hostid: 2.1561e+09\n    hostname: 'archimedes'\n        user: 'roevdmei'\n       group: 'arch2'\n      socket: ''\n        port: 1701\n      status: 3\n    timavail: 1209600\n    memavail: 4.2950e+09\n    cpuavail: 0\n     current: [1x1 struct]\n\nThese are the correct settings I gave the peer.\nHowever, while the peer is actually being executed:\nlist(i).current\n      hostid: 0\n       jobid: 0\n    hostname: ''\n        user: ''\n       group: ''\n      timreq: 0\n      memreq: 0\n      cpureq: 0\n\nThis likely leads to the master never knowing when the slaves are busy with it's jobs, and thus keeps on resubmitting them. When the originals finish, it correctly reverts to the original results and finishes/quits nicely. The resubmitted jobs keep the peers busy for much longer time after this though.\n\n\n\nSorry being inactive/not-very-active the past weeks/months, I'm a bit swamped by theses work and been sick for a long time the past months. Will catch up very soon, hopefully next monday.\nCheers,\nRoemer"
      - +@isprivate: "0"
        commentid: "11380"
        comment_count: "1"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2013-09-20 19:20:12 +0200
        thetext: oh jee, ik was eigenlijk van plan p2p als deprecated af te voeren...
      - +@isprivate: "0"
        commentid: "11386"
        comment_count: "2"
        who:
          +content: roemer.van.der.meij
          +@name: Roemer van der Meij
        bug_when: 2013-09-23 11:13:01 +0200
        thetext: "Oeh, dat is jammer, maar begrijpelijk. Je bent er vast niet echt mee bezig geweest het afgelopen jaar? \n\nNog altijd wel een goed eenvoudig poor man's alternative om bij gebrek aan een dedicated server efficient te werken, al zijn er natuurlijk ook andere systemen. Ik gebruik het momenteel op ons cluster omdat ons torque systeem nog niet live is (dat duurt nog wel een flinke tijd). \n\nMisschien dat je wat tips zou kunnen geven? Ik heb peer.c en wat andere mex-files doorgestruind, op zoek naar de functie die job info verzamelt. De kans is niet super groot dat ik het kan fixen (het symptoom weghacken is eenvoudiger). Misschien dat je van de top of your head wat pointers hebt? Anders, leave it be, en deprecaten."
