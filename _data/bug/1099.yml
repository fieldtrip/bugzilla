+p_xml: 'version="1.0" encoding="UTF-8" standalone="yes" '
+directive: DOCTYPE bugzilla SYSTEM "http://bugzilla.fieldtriptoolbox.org/page.cgi?id=bugzilla.dtd"
bugzilla:
  +@version: 4.4.1
  +@urlbase: http://bugzilla.fieldtriptoolbox.org/
  +@maintainer: r.oostenveld@donders.ru.nl
  bug:
    bug_id: "1099"
    creation_ts: 2011-11-02 09:50:00 +0100
    short_desc: fixdipole should be done in ft_checkconfig instead of main FT functions
    delta_ts: 2012-01-19 10:08:28 +0100
    reporter_accessible: "1"
    cclist_accessible: "1"
    classification_id: "1"
    classification: Unclassified
    product: FieldTrip
    component: core
    version: unspecified
    rep_platform: All
    op_sys: All
    bug_status: ASSIGNED
    resolution:
    bug_file_loc:
    status_whiteboard:
    keywords:
    priority: P2
    bug_severity: enhancement
    target_milestone: '---'
    everconfirmed: "1"
    reporter:
      +content: r.oostenveld
      +@name: Robert Oostenveld
    assigned_to:
      +content: j.schoffelen
      +@name: Jan-Mathijs Schoffelen
    cc:
      - a.stolk8
      - jorn
      - r.oostenveld
    comment_sort_order: oldest_to_newest
    long_desc:
      - +@isprivate: "0"
        commentid: "3781"
        comment_count: "0"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2011-11-02 09:50:53 +0100
        thetext: |-
          I notice in ft_dipolesimulation the following
          cfg.dip = fixdipole(cfg.dip);

          that is similar to the fixsens that we had in many functions. Instead of fixing the problem at many separate locations, we should aim for ft_checkconfig  doing all of this.

          So all three occurences

          manzana> grep fixdipole *.m
          ft_dipolefitting.m:    dip = fixdipole(dip);
          ft_dipolefitting.m:      dip(t) = fixdipole(dip(t));
          ft_dipolesimulation.m:cfg.dip = fixdipole(cfg.dip);


          should be dealt with using ft_checkconfig.

          If this assignment is unclear, please ask Robert what to do!!!
      - +@isprivate: "0"
        commentid: "4080"
        comment_count: "1"
        who:
          +content: b.reuderink
          +@name: Boris Reuderink
        bug_when: 2011-11-17 10:46:52 +0100
        thetext: |-
          Changed the status of bugs without a specific owner to UNCONFIRMED. I'll try to replicate these bugs (potentially involving the submitter), and change confirmed bugs to NEW.

          Boris
      - +@isprivate: "0"
        commentid: "4105"
        comment_count: "2"
        who:
          +content: b.reuderink
          +@name: Boris Reuderink
        bug_when: 2011-11-17 14:05:55 +0100
        thetext: '*** Bug 1131 has been marked as a duplicate of this bug. ***'
      - +@isprivate: "0"
        commentid: "4864"
        comment_count: "3"
        who:
          +content: j.schoffelen
          +@name: Jan-Mathijs Schoffelen
        bug_when: 2012-01-19 09:51:59 +0100
        thetext: |-
          probably it should not be ft_checkconfig where the stuff is done, but ft_checkdata.

          i.e. ft_datatype_dip should be called from within ft_checkdata, and withing ft_datatype_dip the fixdipole functionality should be implemented.
      - +@isprivate: "0"
        commentid: "4865"
        comment_count: "4"
        who:
          +content: j.schoffelen
          +@name: Jan-Mathijs Schoffelen
        bug_when: 2012-01-19 10:01:55 +0100
        thetext: |-
          ft_datatype classifies a data structure as a 'dip' when isfield(data, 'dip'), i.e. it seems that it looks for the output of ft_dipolefitting.

          fixdipole operates on a 'low-level' dip-structure. How shall we make this consistent?
      - +@isprivate: "0"
        commentid: "4866"
        comment_count: "5"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-01-19 10:08:28 +0100
        thetext: "(In reply to comment #4)\n\nit is indeed a bit unclear as to when a dip is a cfg.dip or a data.dip. In either case an inconsistent representation is possible. \n\n[pos, ori] = fixdipole(pos, ori)\n\nshould ensure that pos=Nx3 and mom=3xN.\n\nBut there are also cases where time has to be represented both, and then\n\n[pos, mom] = fixdipole(pos, mom)\n\nshould probably ensure that pos=Nx3 and mom=(3*N)xT"
