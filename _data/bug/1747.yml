+p_xml: 'version="1.0" encoding="UTF-8" standalone="yes" '
+directive: DOCTYPE bugzilla SYSTEM "http://bugzilla.fieldtriptoolbox.org/page.cgi?id=bugzilla.dtd"
bugzilla:
  +@version: 4.4.1
  +@urlbase: http://bugzilla.fieldtriptoolbox.org/
  +@maintainer: r.oostenveld@donders.ru.nl
  bug:
    bug_id: "1747"
    creation_ts: 2012-09-26 22:32:00 +0200
    short_desc: the reading functions can support URL syntax, download on the fly
    delta_ts: 2019-08-10 12:29:27 +0200
    reporter_accessible: "1"
    cclist_accessible: "1"
    classification_id: "1"
    classification: Unclassified
    product: FieldTrip
    component: fileio
    version: unspecified
    rep_platform: PC
    op_sys: Mac OS
    bug_status: CLOSED
    resolution: WONTFIX
    see_also: http://bugzilla.fcdonders.nl/show_bug.cgi?id=1038
    bug_file_loc:
    status_whiteboard:
    keywords:
    priority: P3
    bug_severity: normal
    target_milestone: '---'
    everconfirmed: "1"
    reporter:
      +content: r.oostenveld
      +@name: Robert Oostenveld
    assigned_to:
      +content: eelke.spaak
      +@name: Eelke Spaak
    comment_sort_order: oldest_to_newest
    long_desc:
      - +@isprivate: "0"
        commentid: "7621"
        comment_count: "0"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-09-26 22:32:27 +0200
        thetext: "this was sugegsted by Boris in bug 1038#3\n\n> Maybe some ideas can be borrowed from Python's DataSource:\n> http://docs.scipy.org/doc/numpy/reference/generated/numpy.DataSource.html\n> It implements caching and opening from URLs on top of Robert's proposal.\n\nI have added the decoding of SFTP and FTP identifiers and implemented the support for SFTP. It works in principle, however rapidly fails in case a datafile needs to be complemented with another (unspecified one). \n\nroboos@dccn-c007> svn commit\nSending        fileio/ft_read_atlas.m\nSending        fileio/ft_read_data.m\nSending        fileio/ft_read_event.m\nSending        fileio/ft_read_header.m\nSending        fileio/ft_read_headshape.m\nSending        fileio/ft_read_mri.m\nSending        fileio/ft_read_sens.m\nSending        fileio/ft_read_spike.m\nSending        fileio/ft_read_vol.m\nAdding         fileio/private/fetch_url.m\nSending        fileio/private/filetype_check_uri.m\nTransmitting file data ...........\nCommitted revision 6552."
      - +@isprivate: "0"
        commentid: "7622"
        comment_count: "1"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-09-26 22:33:49 +0200
        thetext: "To be done: \n- implement support for FTP\n- implement support for HTTP\n- possibly implement support for SMB (imagine downloading a file on the fly on mentat from your windows desktop)"
      - +@isprivate: "0"
        commentid: "7624"
        comment_count: "2"
        who:
          +content: eelke.spaak
          +@name: Eelke Spaak
        bug_when: 2012-09-27 08:31:21 +0200
        thetext: 'Would it be an idea to just use Java''s URL? I understand that Matlab provides full access to the Java API. Java transparently supports literally everything we could want: file, smb, http, ftp, sftp, and even zip/gzip/tar given the correct handlers. Plus, it''s fairly trivial to implement your own handlers (as opposed to it being probably quite messy in procedural code).'
      - +@isprivate: "0"
        commentid: "7626"
        comment_count: "3"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-09-27 09:49:32 +0200
        thetext: "(In reply to comment #2)\n\nyes, that is what I had in mind for the FTP and HTTP version. I did not know that Java does sftp, so that is why I implemented that one with a simple system call.\n\nHow to wrap the java code in the MATLAB code is not yet clear. E.g. MATLAB has an ftp object that apparently wraps something.\n\n----------\n>> help ftp\n  FTP Create an FTP object.\n     FTP(host,username,password) returns an FTP object.  If only a host is \n     specified, it defaults to \"anonymous\" login.\n \n\nThere is also an object for http-style URLs\n\n----------\n>> help urlread\n URLREAD Returns the contents of a URL as a string.\n    S = URLREAD('URL') reads the content at a URL into a string, S.  If the\n    server returns binary data, the string will contain garbage.\n    ...\n    s = urlread('http://www.mathworks.com')\n    s = urlread('ftp://ftp.mathworks.com/README')\n    s = urlread(['file:///' fullfile(prefdir,'history.m')])\n\nThe FT specific interface that I have now defined is in fileio/private/fetch_url.m\n-------------\n\n% FETCH_URL checks the filename and downloads the file to a local copy in\n% case it is specified as an Universal Resource Locator. It returns the\n% name of the temporary file on the local filesystem.\n%\n% Use as\n%   filename = fetch_url(filename)\n%\n% In case the filename does not specify an URL, it just returns the original\n% filename.\n\nAnything that can be put inside that function would in principle be fine with me. The only"
      - +@isprivate: "0"
        commentid: "7627"
        comment_count: "4"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-09-27 09:50:12 +0200
        thetext: |-
          This works

          >> s = urlread('ftp://ftp.fcdonders.nl/pub/fieldtrip/00README.txt')

          But this not

          >> s = urlread('sftp://mentat001//home/common/matlab/fieldtrip/data/ftp/00README.txt')
          ??? Error using ==> urlread at 74
          Either this URL could not be parsed or the protocol is not supported.
      - +@isprivate: "0"
        commentid: "7628"
        comment_count: "5"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-09-27 09:52:33 +0200
        thetext: "(In reply to comment #4)\n\nHere it gets a bit unclear ...\n\n>> s = urlread('ftp://ftp.fcdonders.nl/pub/fieldtrip/fieldtrip-lite-20120926.zip');\n>> whos s\n  Name      Size                     Bytes  Class    Attributes\n  s         1x19346980            38693960  char               \n\nAm I now able to simply do\n\nfilename = tempfile\nfid = fopen(filename, 'wb')\nfwrite(fid, s);\nfclose(s)\n\nand then have the same file on the local filesystem?\n\nThis is something to be checked."
      - +@isprivate: "0"
        commentid: "7629"
        comment_count: "6"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2012-09-27 10:07:27 +0200
        thetext: |-
          (In reply to comment #5)

          downloading into a MATLAB variable and then saving to a file can become problematic w.r.t. memory for large files
      - +@isprivate: "0"
        commentid: "12729"
        comment_count: "7"
        who:
          +content: eelke.spaak
          +@name: Eelke Spaak
        bug_when: 2014-01-29 15:02:12 +0100
        thetext: Marking this as wontfix for now, it seems a feature that should be in matlab's file handling routines, but they are not as modern as they should be. Anyone who feels like it should feel free to reassign to themselves :)
      - +@isprivate: "0"
        commentid: "20034"
        comment_count: "8"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2019-08-10 12:29:27 +0200
        thetext: "This closes a whole series of bugs that have been resolved (either FIXED/WONTFIX/INVALID) for quite some time. \n\nIf you disagree, please file a new issue describing the issue on https://github.com/fieldtrip/fieldtrip/issues."
