+p_xml: 'version="1.0" encoding="UTF-8" standalone="yes" '
+directive: DOCTYPE bugzilla SYSTEM "http://bugzilla.fieldtriptoolbox.org/page.cgi?id=bugzilla.dtd"
bugzilla:
  +@version: 4.4.1
  +@urlbase: http://bugzilla.fieldtriptoolbox.org/
  +@maintainer: r.oostenveld@donders.ru.nl
  bug:
    bug_id: "2645"
    creation_ts: 2014-07-10 12:42:00 +0200
    short_desc: ft_timelockanalysis does not deal properly with data containing NaNs
    delta_ts: 2021-09-16 14:57:21 +0200
    reporter_accessible: "1"
    cclist_accessible: "1"
    classification_id: "1"
    classification: Unclassified
    product: FieldTrip
    component: core
    version: unspecified
    rep_platform: PC
    op_sys: Windows
    bug_status: CLOSED
    resolution: FIXED
    see_also: http://bugzilla.fieldtriptoolbox.org/show_bug.cgi?id=3238
    bug_file_loc:
    status_whiteboard:
    keywords:
    priority: P5
    bug_severity: normal
    target_milestone: '---'
    blocked: "3220"
    everconfirmed: "1"
    reporter:
      +content: eelke.spaak
      +@name: Eelke Spaak
    assigned_to:
      +content: eelke.spaak
      +@name: Eelke Spaak
    cc:
      - j.schoffelen
      - malina.szychowska
      - r.oostenveld
      - stefanwiens
      - sws
    comment_sort_order: oldest_to_newest
    long_desc:
      - +@isprivate: "0"
        commentid: "14103"
        comment_count: "0"
        who:
          +content: eelke.spaak
          +@name: Eelke Spaak
        bug_when: 2014-07-10 12:42:43 +0200
        thetext: I believe it should handle the data in a nanmean-like fashion. Preferably it would also keep track of the dof used (i.e. a nan at a timepoint does not add a dof at that timepoint), but this is not necessary I guess.
      - +@isprivate: "0"
        commentid: "16975"
        comment_count: "1"
        who:
          +content: j.schoffelen
          +@name: Jan-Mathijs Schoffelen
        bug_when: 2016-02-24 09:20:29 +0100
        thetext: |-
          This sounds like a reasonable expectation. Yet, since the bug has been open for quite a while now, it does not seem urgent.

          I think it would be as simple as temporarily converting the nans in the dat matrix to 0's (around line 280), before computing the running sum, and to appropriately update the dof variable in line 283.

          @Eelke, could you push this forward with a separate branch, test-script and pull request, please?

          Otherwise, I suggest to close the bug, since no one else will probably do it.
      - +@isprivate: "0"
        commentid: "16986"
        comment_count: "2"
        who:
          +content: eelke.spaak
          +@name: Eelke Spaak
        bug_when: 2016-02-24 09:38:23 +0100
        thetext: |-
          (In reply to Jan-Mathijs Schoffelen from comment #1)
          Sure!
      - +@isprivate: "0"
        commentid: "18884"
        comment_count: "3"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2017-08-25 11:10:21 +0200
        thetext: I ran into this with Stefan and Malina (now CC). It would be nice if this could be resolved.
      - +@isprivate: "0"
        commentid: "18887"
        comment_count: "4"
        who:
          +content: j.schoffelen
          +@name: Jan-Mathijs Schoffelen
        bug_when: 2017-08-25 12:38:10 +0200
        thetext: Perhaps this can be solved, but it probably would also require (or be a good moment) to rethink the vartrllength options...
      - +@isprivate: "0"
        commentid: "20592"
        comment_count: "5"
        who:
          +content: j.schoffelen
          +@name: Jan-Mathijs Schoffelen
        bug_when: 2021-09-16 14:57:12 +0200
        thetext: This currently seems to work just fine. Closing
