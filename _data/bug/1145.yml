+p_xml: 'version="1.0" encoding="UTF-8" standalone="yes" '
+directive: DOCTYPE bugzilla SYSTEM "http://bugzilla.fieldtriptoolbox.org/page.cgi?id=bugzilla.dtd"
bugzilla:
  +@version: 4.4.1
  +@urlbase: http://bugzilla.fieldtriptoolbox.org/
  +@maintainer: r.oostenveld@donders.ru.nl
  bug:
    bug_id: "1145"
    creation_ts: 2011-11-11 15:35:00 +0100
    short_desc: Global variable remains in memory of a peer in the qsub job distribution system
    delta_ts: 2011-11-23 11:57:13 +0100
    reporter_accessible: "1"
    cclist_accessible: "1"
    classification_id: "1"
    classification: Unclassified
    product: FieldTrip
    component: qsub
    version: unspecified
    rep_platform: PC
    op_sys: Windows
    bug_status: VERIFIED
    resolution: FIXED
    bug_file_loc:
    status_whiteboard:
    keywords:
    priority: P3
    bug_severity: normal
    target_milestone: '---'
    everconfirmed: "1"
    reporter:
      +content: a.stolk8
      +@name: Arjen Stolk
    assigned_to:
      +content: r.oostenveld
      +@name: Robert Oostenveld
    cc:
      - b.reuderink
      - marcel.zwiers
    comment_sort_order: oldest_to_newest
    long_desc:
      - +@isprivate: "0"
        commentid: "3980"
        comment_count: "0"
        who:
          +content: a.stolk8
          +@name: Arjen Stolk
        bug_when: 2011-11-11 15:35:13 +0100
        thetext: |-
          According to Inge:

          If you start a series of jobs in which the mfile (sent along) contains a global variable, then that variable is still in memory of the respective peer mentats when sending a next batch of jobs.

          Even when you send a new input for that specific gobal variable, the global variable is not updated.
      - +@isprivate: "0"
        commentid: "4161"
        comment_count: "1"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2011-11-22 13:09:36 +0100
        thetext: |-
          there is a getglobal function in qsub/private, which does the following

          ----
          persistent previous_list previous_varout

          list = whos('global');

          if isequal(list, previous_list)
              var = previous_varout;
              return;
          end
          ----

          so if the variable *names* don't change, it returns the same variable *values*. That is incorrect, because with identical names the value can still become different over subsequent calls.

          The persistent variable was implemented for speed reasons, but apparently cannot work this way. I have fixed it in my local copy, but cannot commit because I am traveling. I'll commit the fixed version later.
      - +@isprivate: "0"
        commentid: "4170"
        comment_count: "2"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2011-11-23 06:16:29 +0100
        thetext: |-
          ip212-238-43-102> svn commit qsub/private/getglobal.m
          Sending        qsub/private/getglobal.m
          Transmitting file data .
          Committed revision 4786.
      - +@isprivate: "0"
        commentid: "4174"
        comment_count: "3"
        who:
          +content: a.stolk8
          +@name: Arjen Stolk
        bug_when: 2011-11-23 08:03:50 +0100
        thetext: |-
          Thanks! Hope you had a nice flight.

          (In reply to comment #2)
      - +@isprivate: "0"
        commentid: "4212"
        comment_count: "4"
        who:
          +content: b.reuderink
          +@name: Boris Reuderink
        bug_when: 2011-11-23 11:56:40 +0100
        thetext: Arjen, could you confirm that this indeed solves Inge's problem? I don't fully understand what this is all about.
