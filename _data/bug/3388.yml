+p_xml: 'version="1.0" encoding="UTF-8" standalone="yes" '
+directive: DOCTYPE bugzilla SYSTEM "http://bugzilla.fieldtriptoolbox.org/page.cgi?id=bugzilla.dtd"
bugzilla:
  +@version: 4.4.1
  +@urlbase: http://bugzilla.fieldtriptoolbox.org/
  +@maintainer: r.oostenveld@donders.ru.nl
  bug:
    bug_id: "3388"
    creation_ts: 2017-12-13 12:12:00 +0100
    short_desc: implement auto-appending for Elekta fif files
    delta_ts: 2018-12-30 18:23:36 +0100
    reporter_accessible: "1"
    cclist_accessible: "1"
    classification_id: "1"
    classification: Unclassified
    product: FieldTrip
    component: fileio
    version: unspecified
    rep_platform: PC
    op_sys: Mac OS
    bug_status: NEW
    resolution:
    bug_file_loc:
    status_whiteboard:
    keywords:
    priority: P5
    bug_severity: normal
    target_milestone: '---'
    everconfirmed: "1"
    reporter:
      +content: r.oostenveld
      +@name: Robert Oostenveld
    assigned_to: fieldtriptoolbox
    cc:
      - Daniel.Lundqvist
      - j.schoffelen
      - lau.moller.andersen
      - mikkel.vinding
      - veikko.jousmaki
    comment_sort_order: oldest_to_newest
    long_desc:
      - +@isprivate: "0"
        commentid: "19139"
        comment_count: "0"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2017-12-13 12:12:07 +0100
        thetext: this should be done for files that exceed the 2gb boundary
      - +@isprivate: "0"
        commentid: "19140"
        comment_count: "1"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2017-12-13 12:13:56 +0100
        thetext: ft_read_header etc should get the option "autoappend=yes/no" which would cause them to auto append.
      - +@isprivate: "0"
        commentid: "19143"
        comment_count: "2"
        who:
          +content: lau.moller.andersen
          +@name: Lau MÃ¸ller Andersen
        bug_when: 2017-12-13 13:56:19 +0100
        thetext: |-
          Here's some code I've been using for my own projects. Let me know whether you want to implement something like this in ft_read_header


          split_extension = 1; %% first split file extension number
          directory = dir(save_path); %% get all files
          all_filenames = {directory.name};
          split_filenames = {};

          % check if filename exists
          filename = [cfg.input_file cfg.input_extension];
          split_filenames{split_extension} = filename;
          filename_exists = sum(strcmp(filename, all_filenames));
          if ~filename_exists
              error(['Filename: ' filename ' does not exist on path: ' save_path])
          end

          % find number of split files
          while true %% run until break
              split_filename = [cfg.input_file '-' num2str(split_extension) ...
                                cfg.input_extension];
              split_filename_exists = sum(strcmp(split_filename, ...
                                                      all_filenames));
              if split_filename_exists
                  split_extension = split_extension + 1;  % increment
                  split_filenames{split_extension} = split_filename;
              else
                  break %% break when no more files can be found
              end
          end
      - +@isprivate: "0"
        commentid: "19616"
        comment_count: "3"
        who:
          +content: j.schoffelen
          +@name: Jan-Mathijs Schoffelen
        bug_when: 2018-12-30 18:22:21 +0100
        thetext: Will anybody be picking up on this anytime soon? If there's no perceived urgency, I suggest to close this one. Otherwise, assign it to a named person (perhaps Lau :) ), so that it will be on his radar.
      - +@isprivate: "0"
        commentid: "19617"
        comment_count: "4"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2018-12-30 18:23:36 +0100
        thetext: Perhaps this is one for the meeting in Birmingham in Jan 2019.
