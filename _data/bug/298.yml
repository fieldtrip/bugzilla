+p_xml: 'version="1.0" encoding="UTF-8" standalone="yes" '
+directive: DOCTYPE bugzilla SYSTEM "http://bugzilla.fieldtriptoolbox.org/page.cgi?id=bugzilla.dtd"
bugzilla:
  +@version: 4.4.1
  +@urlbase: http://bugzilla.fieldtriptoolbox.org/
  +@maintainer: r.oostenveld@donders.ru.nl
  bug:
    bug_id: "298"
    creation_ts: 2010-12-12 11:35:00 +0100
    short_desc: create mex file implementation of keyval
    delta_ts: 2011-02-23 13:51:07 +0100
    reporter_accessible: "1"
    cclist_accessible: "1"
    classification_id: "1"
    classification: Unclassified
    product: FieldTrip
    component: core
    version: unspecified
    rep_platform: PC
    op_sys: Mac OS
    bug_status: CLOSED
    resolution: WONTFIX
    bug_file_loc:
    status_whiteboard:
    keywords:
    priority: P1
    bug_severity: normal
    target_milestone: '---'
    blocked: "486"
    everconfirmed: "1"
    reporter:
      +content: r.oostenveld
      +@name: Robert Oostenveld
    assigned_to:
      +content: r.oostenveld
      +@name: Robert Oostenveld
    comment_sort_order: oldest_to_newest
    long_desc:
      - +@isprivate: "0"
        commentid: "635"
        comment_count: "0"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2010-12-12 11:35:58 +0100
        thetext: the keyval function is called very often, and in some cases it adds a significant overhead to the execution time. A mex implementation of keyval would probably be much faster, cutting down the overhead.
      - +@isprivate: "0"
        commentid: "670"
        comment_count: "1"
        who:
          +content: s.klanke
          +@name: Stefan Klanke
        bug_when: 2010-12-15 15:59:48 +0100
        thetext: |-
          I made a MEX replacement, but so far only put it into branches/testing, along with a small test script that measures performance. It seems the MEX file is about 5x faster than the M-file.

          I did not implement any cashing/hashing yet, since this is also not present in the M-file (contrary to what we discussed in the meeting). We could use uthash to make a hash table out of a cell-array if called with a new argument, and get the index from the hash if we see the same key-value pair (as determined from the pointer address) from than on. Could keep a list of, say, 5 hash tables to allow for alternating calls from different places, but I'm not sure it's really worth it, yet. Also, for the hash-table implementation, it would be good if we could define a maximum string length for the keys. Finally, another speedup would be possible by doing case-sensitive comparisons.
      - +@isprivate: "0"
        commentid: "1094"
        comment_count: "2"
        who:
          +content: s.klanke
          +@name: Stefan Klanke
        bug_when: 2011-01-20 14:40:22 +0100
        thetext: Haven't worked on the implementation since my 2010-12-15.
      - +@isprivate: "0"
        commentid: "1425"
        comment_count: "3"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2011-02-13 10:57:31 +0100
        thetext: keyval will be replaced by ft_getopt, see http://bugzilla.fcdonders.nl/show_bug.cgi?id=486
      - +@isprivate: "0"
        commentid: "1485"
        comment_count: "4"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2011-02-23 13:51:07 +0100
        thetext: I closed all bugs that were in the RESOLVED/FIXED or otherwise RESOLVED state.
