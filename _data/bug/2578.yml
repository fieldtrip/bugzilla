+p_xml: 'version="1.0" encoding="UTF-8" standalone="yes" '
+directive: DOCTYPE bugzilla SYSTEM "http://bugzilla.fieldtriptoolbox.org/page.cgi?id=bugzilla.dtd"
bugzilla:
  +@version: 4.4.1
  +@urlbase: http://bugzilla.fieldtriptoolbox.org/
  +@maintainer: r.oostenveld@donders.ru.nl
  bug:
    bug_id: "2578"
    creation_ts: 2014-05-14 13:41:00 +0200
    short_desc: extend ft_math with (a-b)/(a+b) and more fancy stuff
    delta_ts: 2016-06-14 16:14:48 +0200
    reporter_accessible: "1"
    cclist_accessible: "1"
    classification_id: "1"
    classification: Unclassified
    product: FieldTrip
    component: core
    version: unspecified
    rep_platform: PC
    op_sys: Windows
    bug_status: CLOSED
    resolution: FIXED
    bug_file_loc:
    status_whiteboard:
    keywords:
    priority: P5
    bug_severity: normal
    target_milestone: '---'
    blocked: "1617"
    everconfirmed: "1"
    reporter:
      +content: j.schoffelen
      +@name: Jan-Mathijs Schoffelen
    assigned_to:
      +content: r.oostenveld
      +@name: Robert Oostenveld
    cc:
      - eelke.spaak
      - jorn
      - r.oostenveld
    comment_sort_order: oldest_to_newest
    long_desc:
      - +@isprivate: "0"
        commentid: "13600"
        comment_count: "0"
        who:
          +content: j.schoffelen
          +@name: Jan-Mathijs Schoffelen
        bug_when: 2014-05-14 13:41:13 +0200
        thetext: |-
          (Robert here): perhaps we can even do an eval/regexp type of operation.

          Besides implementing this, it would be important to extend the documentation. Eg is subtract presently implemented as a-b or b-a?

          a syntax like
          cfg.operation = '(x1-x2)/(x1+x2)'
          would be nice.
      - +@isprivate: "0"
        commentid: "13606"
        comment_count: "1"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2014-05-14 17:08:30 +0200
        thetext: "mac011> svn commit ft_math.m test/test_ft_math.m\nSending        ft_math.m\nSending        test/test_ft_math.m\nTransmitting file data ..\nCommitted revision 9524.\n\nmac011> svn commit ft_math.m \nSending        ft_math.m\nTransmitting file data .\nCommitted revision 9525.\n\n@eelke and jorn, could you have a look at the present implementation? Better not try to understand the actual code (I am proud of the functionality, not how it looks), but please do check that the interface is how you would like it to be."
      - +@isprivate: "0"
        commentid: "13607"
        comment_count: "2"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2014-05-14 17:10:15 +0200
        thetext: |-
          (In reply to Robert Oostenveld from comment #1)

          PS getting the implementation to work on all possible inputs (single, two, three, with/without additional scalar, numeric array or cell-array) was not trivial and I do hope that the present code will work on other MATLAB versions than the one I used here (2014a).
      - +@isprivate: "0"
        commentid: "13789"
        comment_count: "3"
        who:
          +content: eelke.spaak
          +@name: Eelke Spaak
        bug_when: 2014-06-01 09:54:44 +0200
        thetext: |-
          (In reply to Robert Oostenveld from comment #1)
          Looks good to me!

          One thing I don't get is why the 'scalar' option exists; we could also specify cfg.operation = 'x1/6' right? I tested this, it works. Another question that arose: why does cfg.operation = 'x1/x2' work, doesn't it need to be x1 ./ x2? Nowhere in ft_math do I see a call to vectorize().
      - +@isprivate: "0"
        commentid: "13790"
        comment_count: "4"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2014-06-01 11:25:56 +0200
        thetext: |-
          (In reply to Eelke Spaak from comment #3)

          cfg.scalar works because it was implemented before the equation parsing was implemented. I agree that it is better to use the new functionality and remove the old from the documentation. Also the "divide" etcetera operations are better replaced by the more explicit new handling. Or at least start with the equation parsing in the help and not have it at the end.

          the x1/x2 works because it is mapped to a local function (@operation) which is then evaluated with arrayfun. This has the (intended) limitation that it is always element wise and that the output is always the same size as the input. If that weer not the case, the description of the data elements (label, time, freq) would fall apart.
      - +@isprivate: "0"
        commentid: "13797"
        comment_count: "5"
        who:
          +content: jorn
          +@name: Jörn M. Horschig
        bug_when: 2014-06-03 10:09:54 +0200
        thetext: "looks also great to me, nice! I would also be in favor of documenting the option to use e.g. x1/6. \nHow about catching an error around the call to arrayfun (line 249) and throw a more intuitive error for the user. Right now, errors look like this:\nUndefined function or variable 'y2'.\n\nError in ft_math/@(x1)log(x1/y2)\n\n\nError in ft_math (line 249)\n          y{i} = arrayfun(operation, arginval{:});\n\nIt would be nicer for the user to get an error \"the specified string-operation is invalid\""
      - +@isprivate: "0"
        commentid: "16323"
        comment_count: "6"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2015-11-10 16:26:39 +0100
        thetext: |-
          (In reply to Jörn M. Horschig from comment #5)

          I updated the documentation. Cleaner error handling is too much work.

          mac011> svn commit ft_math.m
          Sending        ft_math.m
          Transmitting file data .
          Committed revision 10862.
      - +@isprivate: "0"
        commentid: "17482"
        comment_count: "7"
        who:
          +content: r.oostenveld
          +@name: Robert Oostenveld
        bug_when: 2016-06-14 16:14:48 +0200
        thetext: Hereby I am closing multiple bugs that have been resolved for some time now. If you don't agree to the resolution, please reopen.
